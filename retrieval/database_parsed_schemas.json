{
    "academic": {
        "author": "CREATE TABLE author (\n\"aid\" int,\n\"homepage\" text,\n\"name\" text,\n\"oid\" int,\nprimary key(\"aid\")\n);",
        "conference": "CREATE TABLE conference (\n\"cid\" int,\n\"homepage\" text,\n\"name\" text,\nprimary key (\"cid\")\n);",
        "domain": "CREATE TABLE domain (\n\"did\" int,\n\"name\" text,\nprimary key (\"did\")\n);",
        "domain_author": "CREATE TABLE domain_author (\n\"aid\" int, \n\"did\" int,\nprimary key (\"did\", \"aid\"),\nforeign key(\"aid\") references `author`(\"aid\"),\nforeign key(\"did\") references `domain`(\"did\")\n);",
        "domain_conference": "CREATE TABLE domain_conference (\n\"cid\" int,\n\"did\" int,\nprimary key (\"did\", \"cid\"),\nforeign key(\"cid\") references `conference`(\"cid\"),\nforeign key(\"did\") references `domain`(\"did\")\n);",
        "journal": "CREATE TABLE journal (\n\"homepage\" text,\n\"jid\" int,\n\"name\" text,\nprimary key(\"jid\")\n);",
        "domain_journal": "CREATE TABLE domain_journal (\n\"did\" int,\n\"jid\" int,\nprimary key (\"did\", \"jid\"),\nforeign key(\"jid\") references \"journal\"(\"jid\"),\nforeign key(\"did\") references \"domain\"(\"did\")\n);",
        "keyword": "CREATE TABLE keyword (\n\"keyword\" text,\n\"kid\" int,\nprimary key(\"kid\")\n);",
        "domain_keyword": "CREATE TABLE domain_keyword (\n\"did\" int,\n\"kid\" int,\nprimary key (\"did\", \"kid\"),\nforeign key(\"kid\") references \"keyword\"(\"kid\"),\nforeign key(\"did\") references \"domain\"(\"did\")\n);",
        "publication": "CREATE TABLE publication (\n\"abstract\" text,\n\"cid\" text,\n\"citation_num\" int,\n\"jid\" int,\n\"pid\" int,\n\"reference_num\" int,\n\"title\" text,\n\"year\" int,\nprimary key(\"pid\"),\nforeign key(\"jid\") references \"journal\"(\"jid\"),\nforeign key(\"cid\") references \"conference\"(\"cid\")\n);",
        "domain_publication": "CREATE TABLE domain_publication (\n\"did\" int,\n\"pid\" int,\nprimary key (\"did\", \"pid\"),\nforeign key(\"pid\") references \"publication\"(\"pid\"),\nforeign key(\"did\") references \"domain\"(\"did\")\n);",
        "organization": "CREATE TABLE organization (\n\"continent\" text,\n\"homepage\" text,\n\"name\" text,\n\"oid\" int,\nprimary key(\"oid\")\n);",
        "publication_keyword": "CREATE TABLE publication_keyword (\n\"pid\" int,\n\"kid\" int,\nprimary key (\"kid\", \"pid\"),\nforeign key(\"pid\") references \"publication\"(\"pid\"),\nforeign key(\"kid\") references \"keyword\"(\"kid\")\n);",
        "writes": "CREATE TABLE writes (\n\"aid\" int,\n\"pid\" int,\nprimary key (\"aid\", \"pid\"),\nforeign key(\"pid\") references \"publication\"(\"pid\"),\nforeign key(\"aid\") references \"author\"(\"aid\")\n);",
        "cite": "CREATE TABLE cite (\n\"cited\" int,\n\"citing\"  int,\nforeign key(\"cited\") references \"publication\"(\"pid\"),\nforeign key(\"citing\") references \"publication\"(\"pid\")\n);"
    },
    "activity_1": {
        "Activity": "CREATE TABLE Activity (\n  actid INTEGER PRIMARY KEY,\n  activity_name varchar(25)\n);",
        "Participates_in": "CREATE TABLE Participates_in (\n  stuid INTEGER,\n  actid INTEGER,\n  FOREIGN KEY(stuid) REFERENCES Student(StuID),\n  FOREIGN KEY(actid) REFERENCES Activity(actid)\n);",
        "Faculty_Participates_in": "CREATE TABLE Faculty_Participates_in (\n  FacID INTEGER,\n  actid INTEGER,\n  FOREIGN KEY(FacID) REFERENCES Faculty(FacID),\n  FOREIGN KEY(actid) REFERENCES Activity(actid)\n);",
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Faculty": "CREATE TABLE Faculty (\n       FacID \t       INTEGER PRIMARY KEY,\n       Lname\t\tVARCHAR(15),\n       Fname\t\tVARCHAR(15),\n       Rank\t\tVARCHAR(15),\n       Sex\t\tVARCHAR(1),\n       Phone\t\tINTEGER,\n       Room\t\tVARCHAR(5),\n       Building\t\tVARCHAR(13)\n);"
    },
    "aircraft": {
        "pilot": "CREATE TABLE pilot (\n  `Pilot_Id` int(11) NOT NULL,\n  `Name` varchar(50) NOT NULL,\n  `Age` int(11) NOT NULL,\n  PRIMARY KEY (`Pilot_Id`)\n);",
        "aircraft": "CREATE TABLE aircraft (\n  \"Aircraft_ID\" int(11) NOT NULL,\n  \"Aircraft\" varchar(50) NOT NULL,\n  \"Description\" varchar(50) NOT NULL,\n  \"Max_Gross_Weight\" varchar(50) NOT NULL,\n  \"Total_disk_area\" varchar(50) NOT NULL,\n  \"Max_disk_Loading\" varchar(50) NOT NULL,\n  PRIMARY KEY (`Aircraft_ID`)\n);",
        "match": "CREATE TABLE match (\n\"Round\" real,\n\"Location\" text,\n\"Country\" text,\n\"Date\" text,\n\"Fastest_Qualifying\" text,\n\"Winning_Pilot\" text,\n\"Winning_Aircraft\" text,\nPRIMARY KEY (\"Round\"),\nFOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`),\nFOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`)\n);",
        "airport": "CREATE TABLE airport (\n\"Airport_ID\" int,\n\"Airport_Name\" text,\n\"Total_Passengers\" real,\n\"%_Change_2007\" text,\n\"International_Passengers\" real,\n\"Domestic_Passengers\" real,\n\"Transit_Passengers\" real,\n\"Aircraft_Movements\" real,\n\"Freight_Metric_Tonnes\" real,\nPRIMARY KEY (\"Airport_ID\")\n);",
        "airport_aircraft": "CREATE TABLE airport_aircraft (\n\"ID\" int,\n\"Airport_ID\" int,\n\"Aircraft_ID\" int,\nPRIMARY KEY (\"Airport_ID\",\"Aircraft_ID\"),\nFOREIGN KEY (\"Airport_ID\") REFERENCES `airport`(`Airport_ID`),\nFOREIGN KEY (\"Aircraft_ID\") REFERENCES `aircraft`(`Aircraft_ID`)\n);"
    },
    "allergy_1": {
        "Allergy_Type": "CREATE TABLE Allergy_Type (\n       Allergy \t\t  VARCHAR(20) PRIMARY KEY,\n       AllergyType \t  VARCHAR(20)\n);",
        "Has_Allergy": "CREATE TABLE Has_Allergy (\n       StuID \t\t INTEGER,\n       Allergy \t\t VARCHAR(20),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID),\n       FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy)\n);",
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );"
    },
    "apartment_rentals": {
        "Apartment_Buildings": "CREATE TABLE Apartment_Buildings (\nbuilding_id INTEGER NOT NULL,\nbuilding_short_name CHAR(15),\nbuilding_full_name VARCHAR(80),\nbuilding_description VARCHAR(255),\nbuilding_address VARCHAR(255),\nbuilding_manager VARCHAR(50),\nbuilding_phone VARCHAR(80),\nPRIMARY KEY (building_id),\nUNIQUE (building_id)\n);",
        "Apartments": "CREATE TABLE Apartments (\napt_id INTEGER NOT NULL ,\nbuilding_id INTEGER NOT NULL,\napt_type_code CHAR(15),\napt_number CHAR(10),\nbathroom_count INTEGER,\nbedroom_count INTEGER,\nroom_count CHAR(5),\nPRIMARY KEY (apt_id),\nUNIQUE (apt_id),\nFOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id)\n);",
        "Apartment_Facilities": "CREATE TABLE Apartment_Facilities (\napt_id INTEGER NOT NULL,\nfacility_code CHAR(15) NOT NULL,\nPRIMARY KEY (apt_id, facility_code),\nFOREIGN KEY (apt_id) REFERENCES Apartments (apt_id)\n);",
        "Guests": "CREATE TABLE Guests (\nguest_id INTEGER NOT NULL ,\ngender_code CHAR(1),\nguest_first_name VARCHAR(80),\nguest_last_name VARCHAR(80),\ndate_of_birth DATETIME,\nPRIMARY KEY (guest_id),\nUNIQUE (guest_id)\n);",
        "Apartment_Bookings": "CREATE TABLE Apartment_Bookings (\napt_booking_id INTEGER NOT NULL,\napt_id INTEGER,\nguest_id INTEGER NOT NULL,\nbooking_status_code CHAR(15) NOT NULL,\nbooking_start_date DATETIME,\nbooking_end_date DATETIME,\nPRIMARY KEY (apt_booking_id),\nUNIQUE (apt_booking_id),\nFOREIGN KEY (apt_id) REFERENCES Apartments (apt_id),\nFOREIGN KEY (guest_id) REFERENCES Guests (guest_id)\n);",
        "View_Unit_Status": "CREATE TABLE View_Unit_Status (\napt_id INTEGER,\napt_booking_id INTEGER,\nstatus_date DATETIME NOT NULL,\navailable_yn BIT,\nPRIMARY KEY (status_date),\nFOREIGN KEY (apt_id) REFERENCES Apartments (apt_id),\nFOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id)\n);"
    },
    "architecture": {
        "architect": "CREATE TABLE architect (\n\"id\" text,\n\"name\" text,\n\"nationality\" text,\n\"gender\" text,\nprimary key(\"id\")\n);",
        "bridge": "CREATE TABLE bridge (\n\"architect_id\" int,\n\"id\" int,\n\"name\" text,\n\"location\" text,\n\"length_meters\" real,\n\"length_feet\" real,\nprimary key(\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);",
        "mill": "CREATE TABLE mill (\n\"architect_id\" int,\n\"id\" int,\n\"location\" text,\n\"name\" text,\n\"type\" text,\n\"built_year\" int,\n\"notes\" text,\nprimary key (\"id\"),\nforeign key (\"architect_id\" ) references `architect`(\"id\")\n);"
    },
    "assets_maintenance": {
        "Third_Party_Companies": "CREATE TABLE Third_Party_Companies (\n`company_id` INTEGER PRIMARY KEY ,\n`company_type` VARCHAR(5) NOT NULL,\n`company_name` VARCHAR(255),\n`company_address` VARCHAR(255),\n`other_company_details` VARCHAR(255)\n);",
        "Maintenance_Contracts": "CREATE TABLE Maintenance_Contracts (\n`maintenance_contract_id` INTEGER PRIMARY KEY,\n`maintenance_contract_company_id` INTEGER NOT NULL,\n`contract_start_date` DATETIME,\n`contract_end_date` DATETIME,\n`other_contract_details` VARCHAR(255),\nFOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` )\n);",
        "Parts": "CREATE TABLE Parts (\n`part_id` INTEGER PRIMARY KEY,\n`part_name` VARCHAR(255),\n`chargeable_yn` VARCHAR(1),\n`chargeable_amount` VARCHAR(20),\n`other_part_details` VARCHAR(255)\n);",
        "Skills": "CREATE TABLE Skills (\n`skill_id` INTEGER PRIMARY KEY,\n`skill_code` VARCHAR(20),\n`skill_description` VARCHAR(255)\n);",
        "Staff": "CREATE TABLE Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`staff_name` VARCHAR(255),\n`gender` VARCHAR(1),\n`other_staff_details` VARCHAR(255)\n);",
        "Assets": "CREATE TABLE Assets (\n`asset_id` INTEGER PRIMARY KEY,\n`maintenance_contract_id` INTEGER NOT NULL,\n`supplier_company_id` INTEGER NOT NULL,\n`asset_details` VARCHAR(255),\n`asset_make` VARCHAR(20),\n`asset_model` VARCHAR(20),\n`asset_acquired_date` DATETIME,\n`asset_disposed_date` DATETIME,\n`other_asset_details` VARCHAR(255),\nFOREIGN KEY (`maintenance_contract_id` )\nREFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ),\nFOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` )\n);",
        "Asset_Parts": "CREATE TABLE Asset_Parts (\n`asset_id` INTEGER NOT NULL,\n`part_id` INTEGER NOT NULL,\nFOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ),\nFOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` )\n);",
        "Maintenance_Engineers": "CREATE TABLE Maintenance_Engineers (\n`engineer_id` INTEGER PRIMARY KEY,\n`company_id` INTEGER NOT NULL,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` )\n);",
        "Engineer_Skills": "CREATE TABLE Engineer_Skills (\n`engineer_id` INTEGER NOT NULL,\n`skill_id` INTEGER NOT NULL,\nFOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ),\nFOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` )\n);",
        "Fault_Log": "CREATE TABLE Fault_Log (\n`fault_log_entry_id` INTEGER PRIMARY KEY,\n`asset_id` INTEGER NOT NULL,\n`recorded_by_staff_id` INTEGER NOT NULL,\n`fault_log_entry_datetime` DATETIME,\n`fault_description` VARCHAR(255),\n`other_fault_details` VARCHAR(255),\nFOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ),\nFOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` )\n);",
        "Engineer_Visits": "CREATE TABLE Engineer_Visits (\n`engineer_visit_id` INTEGER PRIMARY KEY,\n`contact_staff_id` INTEGER,\n`engineer_id` INTEGER NOT NULL,\n`fault_log_entry_id` INTEGER NOT NULL,\n`fault_status` VARCHAR(10) NOT NULL,\n`visit_start_datetime` DATETIME,\n`visit_end_datetime` DATETIME,\n`other_visit_details` VARCHAR(255),\nFOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ),\nFOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ),\nFOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` )\n);",
        "Part_Faults": "CREATE TABLE Part_Faults (\n`part_fault_id` INTEGER PRIMARY KEY,\n`part_id` INTEGER NOT NULL,\n`fault_short_name` VARCHAR(20),\n`fault_description` VARCHAR(255),\n`other_fault_details` VARCHAR(255),\nFOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` )\n);",
        "Fault_Log_Parts": "CREATE TABLE Fault_Log_Parts (\n`fault_log_entry_id` INTEGER NOT NULL,\n`part_fault_id` INTEGER NOT NULL,\n`fault_status` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ),\nFOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` )\n);",
        "Skills_Required_To_Fix": "CREATE TABLE Skills_Required_To_Fix (\n`part_fault_id` INTEGER NOT NULL,\n`skill_id` INTEGER NOT NULL,\nFOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ),\nFOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` )\n);"
    },
    "baseball_1": {
        "all_star": "CREATE TABLE all_star (\n    player_id TEXT,\n    year INTEGER,\n    game_num INTEGER,\n    game_id TEXT,\n    team_id TEXT,\n    league_id TEXT,\n    gp NUMERIC,\n    starting_pos NUMERIC,\n    foreign key (player_id) references player(player_id)\n);",
        "appearances": "CREATE TABLE appearances (\n    year INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    player_id TEXT,\n    g_all NUMERIC,\n    gs NUMERIC,\n    g_batting INTEGER,\n    g_defense NUMERIC,\n    g_p INTEGER,\n    g_c INTEGER,\n    g_1b INTEGER,\n    g_2b INTEGER,\n    g_3b INTEGER,\n    g_ss INTEGER,\n    g_lf INTEGER,\n    g_cf INTEGER,\n    g_rf INTEGER,\n    g_of INTEGER,\n    g_dh NUMERIC,\n    g_ph NUMERIC,\n    g_pr NUMERIC,\n    foreign key (team_id) references team(team_id),\n    foreign key (player_id) references player(player_id)\n);",
        "manager_award": "CREATE TABLE manager_award (\n    player_id TEXT,\n    award_id TEXT,\n    year INTEGER,\n    league_id TEXT,\n    tie TEXT,\n    notes NUMERIC,\n    foreign key (player_id) references player(player_id)\n);",
        "player_award": "CREATE TABLE player_award ( \n\tplayer_id TEXT, \n\taward_id TEXT, \n\tyear INTEGER, \n\tleague_id TEXT,\n    \ttie TEXT,\n    \tnotes TEXT,\n\tforeign key (player_id) references player(player_id)\n);",
        "manager_award_vote": "CREATE TABLE manager_award_vote (\n    award_id TEXT,\n    year INTEGER,\n    league_id TEXT,\n    player_id TEXT,\n    points_won INTEGER,\n    points_max INTEGER,\n    votes_first INTEGER);",
        "player_award_vote": "CREATE TABLE player_award_vote (\n    award_id TEXT,\n    year INTEGER,\n    league_id TEXT,\n    player_id TEXT,\n    points_won NUMERIC,\n    points_max INTEGER,\n    votes_first NUMERIC,\n   foreign key (player_id) references player(player_id)\n);",
        "batting": "CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,\n    r NUMERIC,\n    h NUMERIC,\n    double NUMERIC,\n    triple NUMERIC,\n    hr NUMERIC,\n    rbi NUMERIC,\n    sb NUMERIC,\n    cs NUMERIC,\n    bb NUMERIC,\n    so NUMERIC,\n    ibb NUMERIC,\n    hbp NUMERIC,\n    sh NUMERIC,\n    sf NUMERIC,\n    g_idp NUMERIC,\nforeign key (player_id) references player(player_id)\n);",
        "batting_postseason": "CREATE TABLE batting_postseason (\n    year INTEGER,\n    round TEXT,\n    player_id TEXT,\n    team_id TEXT,\n    league_id TEXT,\n    g INTEGER,\n    ab INTEGER,\n    r INTEGER,\n    h INTEGER,\n    double INTEGER,\n    triple INTEGER,\n    hr INTEGER,\n    rbi INTEGER,\n    sb INTEGER,\n    cs NUMERIC,\n    bb INTEGER,\n    so INTEGER,\n    ibb NUMERIC,\n    hbp NUMERIC,\n    sh NUMERIC,\n    sf NUMERIC,\n    g_idp NUMERIC,\n\tforeign key (player_id) references player(player_id),\n\tforeign key (team_id) references team(team_id)\n);",
        "player_college": "CREATE TABLE player_college ( player_id TEXT,\n    college_id TEXT,\n    year INTEGER,\n\tforeign key (player_id) references player(player_id),\n\tforeign key (college_id) references college(college_id)\n);",
        "fielding": "CREATE TABLE fielding (\n    player_id TEXT,\n    year INTEGER,\n    stint INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    pos TEXT,\n    g INTEGER,\n    gs NUMERIC,\n    inn_outs NUMERIC,\n    po NUMERIC,\n    a NUMERIC,\n    e NUMERIC,\n    dp NUMERIC,\n    pb NUMERIC,\n    wp NUMERIC,\n    sb NUMERIC,\n    cs NUMERIC,\n    zr NUMERIC,\n\tforeign key (player_id) references player(player_id)\n);",
        "fielding_outfield": "CREATE TABLE fielding_outfield (\n    player_id TEXT,\n    year INTEGER,\n    stint INTEGER,\n    glf NUMERIC,\n    gcf NUMERIC,\n    grf NUMERIC,\n\tforeign key (player_id) references player(player_id)\n);",
        "fielding_postseason": "CREATE TABLE fielding_postseason (\n    player_id TEXT,\n    year INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    round TEXT,\n    pos TEXT,\n    g INTEGER,\n    gs NUMERIC,\n    inn_outs NUMERIC,\n    po INTEGER,\n    a INTEGER,\n    e INTEGER,\n    dp INTEGER,\n    tp INTEGER,\n    pb NUMERIC,\n    sb NUMERIC,\n    cs NUMERIC,\n\tforeign key (player_id) references player(player_id),\n\tforeign key (team_id) references player(team_id)\n);",
        "hall_of_fame": "CREATE TABLE hall_of_fame (\n    player_id TEXT,\n    yearid INTEGER,\n    votedby TEXT,\n    ballots NUMERIC,\n    needed NUMERIC,\n    votes NUMERIC,\n    inducted TEXT,\n    category TEXT,\n    needed_note TEXT,\n\tforeign key (player_id) references player(player_id)\n);",
        "home_game": "CREATE TABLE home_game (\n    year INTEGER,\n    league_id TEXT,\n    team_id TEXT,\n    park_id TEXT,\n    span_first TEXT,\n    span_last TEXT,\n    games INTEGER,\n    openings INTEGER,\n    attendance INTEGER,\n\tforeign key (team_id) references team(team_id),\n\tforeign key (park_id) references park(park_id)\n);",
        "manager": "CREATE TABLE manager (\n    player_id TEXT,\n    year INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    inseason INTEGER,\n    g INTEGER,\n    w INTEGER,\n    l INTEGER,\n    rank NUMERIC,\n    plyr_mgr TEXT,\n\tforeign key (team_id) references team(team_id)\n);",
        "manager_half": "CREATE TABLE manager_half (\n    player_id TEXT,\n    year INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    inseason INTEGER,\n    half INTEGER,\n    g INTEGER,\n    w INTEGER,\n    l INTEGER,\n    rank INTEGER,\n\tforeign key (team_id) references team(team_id)\n);",
        "player": "CREATE TABLE player (\n    player_id TEXT,\n    birth_year NUMERIC,\n    birth_month NUMERIC,\n    birth_day NUMERIC,\n    birth_country TEXT,\n    birth_state TEXT,\n    birth_city TEXT,\n    death_year NUMERIC,\n    death_month NUMERIC,\n    death_day NUMERIC,\n    death_country TEXT,\n    death_state TEXT,\n    death_city TEXT,\n    name_first TEXT,\n    name_last TEXT,\n    name_given TEXT,\n    weight NUMERIC,\n    height NUMERIC,\n    bats TEXT,\n    throws TEXT,\n    debut TEXT,\n    final_game TEXT,\n    retro_id TEXT,\n    bbref_id TEXT);",
        "park": "CREATE TABLE park (\n    park_id TEXT,\n    park_name TEXT,\n    park_alias TEXT,\n    city TEXT,\n    state TEXT,\n    country TEXT);",
        "pitching": "CREATE TABLE pitching (\n    player_id TEXT,\n    year INTEGER,\n    stint INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    w INTEGER,\n    l INTEGER,\n    g INTEGER,\n    gs INTEGER,\n    cg INTEGER,\n    sho INTEGER,\n    sv INTEGER,\n    ipouts NUMERIC,\n    h INTEGER,\n    er INTEGER,\n    hr INTEGER,\n    bb INTEGER,\n    so INTEGER,\n    baopp NUMERIC,\n    era NUMERIC,\n    ibb NUMERIC,\n    wp NUMERIC,\n    hbp NUMERIC,\n    bk INTEGER,\n    bfp NUMERIC,\n    gf NUMERIC,\n    r INTEGER,\n    sh NUMERIC,\n    sf NUMERIC,\n    g_idp NUMERIC);",
        "pitching_postseason": "CREATE TABLE pitching_postseason (\n    player_id TEXT,\n    year INTEGER,\n    round TEXT,\n    team_id TEXT,\n    league_id TEXT,\n    w INTEGER,\n    l INTEGER,\n    g INTEGER,\n    gs INTEGER,\n    cg INTEGER,\n    sho INTEGER,\n    sv INTEGER,\n    ipouts INTEGER,\n    h INTEGER,\n    er INTEGER,\n    hr INTEGER,\n    bb INTEGER,\n    so INTEGER,\n    baopp TEXT,\n    era NUMERIC,\n    ibb NUMERIC,\n    wp NUMERIC,\n    hbp NUMERIC,\n    bk NUMERIC,\n    bfp NUMERIC,\n    gf INTEGER,\n    r INTEGER,\n    sh NUMERIC,\n    sf NUMERIC,\n    g_idp NUMERIC);",
        "salary": "CREATE TABLE salary (\n    year INTEGER,\n    team_id TEXT,\n    league_id TEXT,\n    player_id TEXT,\n    salary INTEGER);",
        "college": "CREATE TABLE college (\n    college_id TEXT,\n    name_full TEXT,\n    city TEXT,\n    state TEXT,\n    country TEXT);",
        "postseason": "CREATE TABLE postseason (\n    year INTEGER,\n    round TEXT,\n    team_id_winner TEXT,\n    league_id_winner TEXT,\n    team_id_loser TEXT,\n    league_id_loser TEXT,\n    wins INTEGER,\n    losses INTEGER,\n    ties INTEGER);",
        "team": "CREATE TABLE team (\n    year INTEGER,\n    league_id TEXT,\n    team_id TEXT,\n    franchise_id TEXT,\n    div_id TEXT,\n    rank INTEGER,\n    g INTEGER,\n    ghome NUMERIC,\n    w INTEGER,\n    l INTEGER,\n    div_win TEXT,\n    wc_win TEXT,\n    lg_win TEXT,\n    ws_win TEXT,\n    r INTEGER,\n    ab INTEGER,\n    h INTEGER,\n    double INTEGER,\n    triple INTEGER,\n    hr INTEGER,\n    bb INTEGER,\n    so NUMERIC,\n    sb NUMERIC,\n    cs NUMERIC,\n    hbp NUMERIC,\n    sf NUMERIC,\n    ra INTEGER,\n    er INTEGER,\n    era NUMERIC,\n    cg INTEGER,\n    sho INTEGER,\n    sv INTEGER,\n    ipouts INTEGER,\n    ha INTEGER,\n    hra INTEGER,\n    bba INTEGER,\n    soa INTEGER,\n    e INTEGER,\n    dp NUMERIC,\n    fp NUMERIC,\n    name TEXT,\n    park TEXT,\n    attendance NUMERIC,\n    bpf INTEGER,\n    ppf INTEGER,\n    team_id_br TEXT,\n    team_id_lahman45 TEXT,\n    team_id_retro TEXT);",
        "team_franchise": "CREATE TABLE team_franchise (\n    franchise_id TEXT,\n    franchise_name TEXT,\n    active TEXT,\n    na_assoc TEXT);",
        "team_half": "CREATE TABLE team_half (\n    year INTEGER,\n    league_id TEXT,\n    team_id TEXT,\n    half INTEGER,\n    div_id TEXT,\n    div_win TEXT,\n    rank INTEGER,\n    g INTEGER,\n    w INTEGER,\n    l INTEGER);"
    },
    "battle_death": {
        "battle": "CREATE TABLE battle (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n);",
        "ship": "CREATE TABLE ship (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n);",
        "death": "CREATE TABLE death (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n);"
    },
    "behavior_monitoring": {
        "Ref_Address_Types": "CREATE TABLE Ref_Address_Types (\n`address_type_code` VARCHAR(15) PRIMARY KEY,\n`address_type_description` VARCHAR(80)\n);",
        "Ref_Detention_Type": "CREATE TABLE Ref_Detention_Type (\n`detention_type_code` VARCHAR(10) PRIMARY KEY,\n`detention_type_description` VARCHAR(80)\n);",
        "Ref_Incident_Type": "CREATE TABLE Ref_Incident_Type (\n`incident_type_code` VARCHAR(10) PRIMARY KEY,\n`incident_type_description` VARCHAR(80)\n);",
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(120),\n`line_2` VARCHAR(120),\n`line_3` VARCHAR(120),\n`city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n);",
        "Students": "CREATE TABLE Students (\n`student_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`date_first_rental` DATETIME,\n`date_left_university` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Teachers": "CREATE TABLE Teachers (\n`teacher_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`gender` VARCHAR(1),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Assessment_Notes": "CREATE TABLE Assessment_Notes (\n`notes_id` INTEGER NOT NULL ,\n`student_id` INTEGER,\n`teacher_id` INTEGER NOT NULL,\n`date_of_notes` DATETIME,\n`text_of_notes` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ),\nFOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` )\n);",
        "Behavior_Incident": "CREATE TABLE Behavior_Incident (\n`incident_id` INTEGER PRIMARY KEY,\n`incident_type_code` VARCHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_incident_start` DATETIME,\n`date_incident_end` DATETIME,\n`incident_summary` VARCHAR(255),\n`recommendations` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n);",
        "Detention": "CREATE TABLE Detention (\n`detention_id` INTEGER PRIMARY KEY,\n`detention_type_code` VARCHAR(10) NOT NULL,\n`teacher_id` INTEGER,\n`datetime_detention_start` DATETIME,\n`datetime_detention_end` DATETIME,\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ),\nFOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` )\n);",
        "Student_Addresses": "CREATE TABLE Student_Addresses (\n`student_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_address_from` DATETIME NOT NULL,\n`date_address_to` DATETIME,\n`monthly_rental` DECIMAL(19,4),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n);",
        "Students_in_Detention": "CREATE TABLE Students_in_Detention (\n`student_id` INTEGER NOT NULL,\n`detention_id` INTEGER NOT NULL,\n`incident_id` INTEGER NOT NULL,\nFOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ),\nFOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n);"
    },
    "bike_1": {
        "station": "CREATE TABLE station (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    lat NUMERIC,\n    long NUMERIC,\n    dock_count INTEGER,\n    city TEXT,\n    installation_date TEXT);",
        "status": "CREATE TABLE status (\n    station_id INTEGER,\n    bikes_available INTEGER,\n    docks_available INTEGER,\n    time TEXT,\n    FOREIGN KEY (station_id) REFERENCES station(id)\n);",
        "trip": "CREATE TABLE trip (\n    id INTEGER PRIMARY KEY,\n    duration INTEGER,\n    start_date TEXT,\n    start_station_name TEXT, -- this should be removed\n    start_station_id INTEGER,\n    end_date TEXT,\n    end_station_name TEXT, -- this should be removed\n    end_station_id INTEGER,\n    bike_id INTEGER,\n    subscription_type TEXT,\n    zip_code INTEGER);",
        "weather": "CREATE TABLE weather (\n    date TEXT,\n    max_temperature_f INTEGER,\n    mean_temperature_f INTEGER,\n    min_temperature_f INTEGER,\n    max_dew_point_f INTEGER,\n    mean_dew_point_f INTEGER,\n    min_dew_point_f INTEGER,\n    max_humidity INTEGER,\n    mean_humidity INTEGER,\n    min_humidity INTEGER,\n    max_sea_level_pressure_inches NUMERIC,\n    mean_sea_level_pressure_inches NUMERIC,\n    min_sea_level_pressure_inches NUMERIC,\n    max_visibility_miles INTEGER,\n    mean_visibility_miles INTEGER,\n    min_visibility_miles INTEGER,\n    max_wind_Speed_mph INTEGER,\n    mean_wind_speed_mph INTEGER,\n    max_gust_speed_mph INTEGER,\n    precipitation_inches INTEGER,\n    cloud_cover INTEGER,\n    events TEXT,\n    wind_dir_degrees INTEGER,\n    zip_code INTEGER);"
    },
    "body_builder": {
        "body_builder": "CREATE TABLE body_builder (\n\"Body_Builder_ID\" int,\n\"People_ID\" int,\n\"Snatch\" real,\n\"Clean_Jerk\" real,\n\"Total\" real,\nPRIMARY KEY (\"Body_Builder_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Name\" text,\n\"Height\" real,\n\"Weight\" real,\n\"Birth_Date\" text,\n\"Birth_Place\" text,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "book_2": {
        "publication": "CREATE TABLE publication (\n\"Publication_ID\" int,\n\"Book_ID\" int,\n\"Publisher\" text,\n\"Publication_Date\" text,\n\"Price\" real,\nPRIMARY KEY (\"Publication_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES \"book\"(\"Book_ID\")\n);",
        "book": "CREATE TABLE book (\n\"Book_ID\" int,\n\"Title\" text,\n\"Issues\" real,\n\"Writer\" text,\nPRIMARY KEY (\"Book_ID\")\n);"
    },
    "browser_web": {},
    "candidate_poll": {
        "candidate": "CREATE TABLE candidate (\n\"Candidate_ID\" int,\n\"People_ID\" int,\n\"Poll_Source\" text,\n\"Date\" text,\n\"Support_rate\" real,\n\"Consider_rate\" real,\n\"Oppose_rate\" real,\n\"Unsure_rate\" real,\nPRIMARY KEY (\"Candidate_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES \"people\"(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Sex\" text,\n\"Name\" text,\n\"Date_of_Birth\" text,\n\"Height\" real,\n\"Weight\" real,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "cinema": {
        "film": "CREATE TABLE film (\n\"Film_ID\" int,\n\"Rank_in_series\" int,\n\"Number_in_season\" int,\n\"Title\" text,\n\"Directed_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" text,\nPRIMARY KEY (\"Film_ID\")\n);",
        "cinema": "CREATE TABLE cinema (\n\"Cinema_ID\" int,\n\"Name\" text,\n\"Openning_year\" int,\n\"Capacity\" int,\n\"Location\" text,\nPRIMARY KEY (\"Cinema_ID\"));",
        "schedule": "CREATE TABLE schedule (\n\"Cinema_ID\" int,\n\"Film_ID\" int,\n\"Date\" text,\n\"Show_times_per_day\" int,\n\"Price\" float,\nPRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),\nFOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),\nFOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`)\n);"
    },
    "city_record": {
        "city": "CREATE TABLE city (\n\"City_ID\" int,\n\"City\" text,\n\"Hanzi\" text,\n\"Hanyu_Pinyin\" text,\n\"Regional_Population\" int,\n\"GDP\" real,\nPRIMARY KEY (\"City_ID\")\n);",
        "match": "CREATE TABLE match (\n\"Match_ID\" int,\n\"Date\" text,\n\"Venue\" text,\n\"Score\" text,\n\"Result\" text,\n\"Competition\" text,\nPRIMARY KEY (\"Match_ID\")\n);",
        "temperature": "CREATE TABLE temperature (\n\"City_ID\" int,\n\"Jan\" real,\n\"Feb\" real,\n\"Mar\" real,\n\"Apr\" real,\n\"Jun\" real,\n\"Jul\" real,\n\"Aug\" real,\n\"Sep\" real,\n\"Oct\" real,\n\"Nov\" real,\n\"Dec\" real,\nPRIMARY KEY (\"City_ID\"),\nFOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`)\n);",
        "hosting_city": "CREATE TABLE hosting_city (\n  \"Year\" int,\n  \"Match_ID\" int,\n  \"Host_City\" text,\n  PRIMARY KEY (\"Year\"),\n  FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`),\n  FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`)\n);"
    },
    "climbing": {
        "mountain": "CREATE TABLE mountain (\n\"Mountain_ID\" int,\n\"Name\" text,\n\"Height\" real,\n\"Prominence\" real,\n\"Range\" text,\n\"Country\" text,\nPRIMARY KEY (\"Mountain_ID\")\n);",
        "climber": "CREATE TABLE climber (\n\"Climber_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Time\" text,\n\"Points\" real,\n\"Mountain_ID\" int,\nPRIMARY KEY (\"Climber_ID\"),\nFOREIGN KEY (\"Mountain_ID\") REFERENCES \"mountain\"(\"Mountain_ID\")\n);"
    },
    "club_1": {
        "Student": "CREATE TABLE Student (\n         StuID        INTEGER PRIMARY KEY,\n         LName        VARCHAR(12),\n         Fname        VARCHAR(12),\n         Age      INTEGER,\n         Sex      VARCHAR(1),\n         Major        INTEGER,\n         Advisor      INTEGER,\n         city_code    VARCHAR(3)\n  );",
        "Club": "CREATE TABLE Club (\n       ClubID           INTEGER PRIMARY KEY,\n       ClubName         VARCHAR(40),\n       ClubDesc         VARCHAR(1024),\n       ClubLocation VARCHAR(40)\n);",
        "Member_of_club": "CREATE TABLE Member_of_club (\n       StuID            INTEGER,\n       ClubID           INTEGER,\n       Position     VARCHAR(40),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID),\n       FOREIGN KEY(ClubID) REFERENCES Club(ClubID)\n);"
    },
    "coffee_shop": {
        "shop": "CREATE TABLE shop (\n\"Shop_ID\" int,\n\"Address\" text,\n\"Num_of_staff\" text,\n\"Score\" real,\n\"Open_Year\" text,\nPRIMARY KEY (\"Shop_ID\")\n);",
        "member": "CREATE TABLE member (\n\"Member_ID\" int,\n\"Name\" text,\n\"Membership_card\" text,\n\"Age\" int,\n\"Time_of_purchase\" int,\n\"Level_of_membership\" int,\n\"Address\" text,\nPRIMARY KEY (\"Member_ID\")\n);",
        "happy_hour": "CREATE TABLE happy_hour (\n\"HH_ID\" int,\n\"Shop_ID\" int,\n\"Month\" text,\n\"Num_of_shaff_in_charge\" int,\nPRIMARY KEY (\"HH_ID\",\"Shop_ID\",\"Month\"),\nFOREIGN KEY (\"Shop_ID\") REFERENCES `shop`(\"Shop_ID\")\n);",
        "happy_hour_member": "CREATE TABLE happy_hour_member (\n\"HH_ID\" int,\n\"Member_ID\" int,\n\"Total_amount\" real,\nPRIMARY KEY (\"HH_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n);"
    },
    "college_3": {
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Faculty": "CREATE TABLE Faculty (\n       FacID \t       INTEGER PRIMARY KEY,\n       Lname\t\tVARCHAR(15),\n       Fname\t\tVARCHAR(15),\n       Rank\t\tVARCHAR(15),\n       Sex\t\tVARCHAR(1),\n       Phone\t\tINTEGER,\n       Room\t\tVARCHAR(5),\n       Building\t\tVARCHAR(13)\n);",
        "Department": "CREATE TABLE Department (\n       DNO   \t\tINTEGER PRIMARY KEY,\n       Division\t\tVARCHAR(2),\n       DName\t\tVARCHAR(25),\n       Room\t\tVARCHAR(5),\n       Building\t\tVARCHAR(13),\n       DPhone\t\tINTEGER\n);",
        "Member_of": "CREATE TABLE Member_of (\n       FacID \t       INTEGER,\n       DNO\t       INTEGER,\n       Appt_Type       VARCHAR(15),\n       FOREIGN KEY(FacID) REFERENCES Faculty(FacID),\n       FOREIGN KEY(DNO) REFERENCES Department(DNO)\n);",
        "Course": "CREATE TABLE Course (\n       CID   \t    \tVARCHAR(7) PRIMARY KEY,\n       CName\t\tVARCHAR(40),\n       Credits\t\tINTEGER,\n       Instructor\tINTEGER,\n       Days\t\tVARCHAR(5),\n       Hours\t\tVARCHAR(11),\n       DNO\t\tINTEGER,\n       FOREIGN KEY(Instructor) REFERENCES Faculty(FacID),\n       FOREIGN KEY(DNO) REFERENCES Department(DNO)\n);",
        "Minor_in": "CREATE TABLE Minor_in (\n       StuID \t      INTEGER,\n       DNO\t\tINTEGER,\n       FOREIGN KEY(StuID) REFERENCES Student(StuID),\n       FOREIGN KEY(DNO) REFERENCES Department(DNO)\n);",
        "Enrolled_in": "CREATE TABLE Enrolled_in (\n       StuID \t\t INTEGER,\n       CID\t\tVARCHAR(7),\n       Grade\t\tVARCHAR(2),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID),\n       FOREIGN KEY(CID) REFERENCES Course(CID),\n       FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade)\n);",
        "Gradeconversion": "CREATE TABLE Gradeconversion (\n       lettergrade\t     VARCHAR(2) PRIMARY KEY,\n       gradepoint\t     FLOAT\n);"
    },
    "company_employee": {
        "people": "CREATE TABLE people (\n    \"People_ID\" int,\n    \"Age\" int,\n    \"Name\" text,\n    \"Nationality\" text,\n    \"Graduation_College\" text,\n    PRIMARY KEY (\"People_ID\")\n);",
        "company": "CREATE TABLE company (\n    \"Company_ID\" real,\n    \"Name\" text,\n    \"Headquarters\" text,\n    \"Industry\" text,\n    \"Sales_in_Billion\" real,\n    \"Profits_in_Billion\" real,\n    \"Assets_in_Billion\" real,\n    \"Market_Value_in_Billion\" real,\n    PRIMARY KEY (\"Company_ID\")\n);",
        "employment": "CREATE TABLE employment (\n    \"Company_ID\" int,\n    \"People_ID\" int,\n    \"Year_working\" int,\n    PRIMARY KEY (\"Company_ID\",\"People_ID\"),\n    FOREIGN KEY (\"Company_ID\") REFERENCES `company`(\"Company_ID\"),\n    FOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n);"
    },
    "company_office": {
        "buildings": "CREATE TABLE buildings (\n\"id\" int,\n\"name\" text,\n\"City\" text,\n\"Height\" int,\n\"Stories\" int,\n\"Status\" text,\nPRIMARY KEY(\"id\")\n);",
        "Companies": "CREATE TABLE Companies (\n\"id\" int,\n\"name\" text,\n\"Headquarters\" text,\n\"Industry\" text,\n\"Sales_billion\" real,\n\"Profits_billion\" real,\n\"Assets_billion\" real,\n\"Market_Value_billion\" text,\nPRIMARY KEY (\"id\")\n);",
        "Office_locations": "CREATE TABLE Office_locations (\n\"building_id\" int,\n\"company_id\" int,\n\"move_in_year\" int,\nPRIMARY KEY (\"building_id\", \"company_id\"),\nFOREIGN KEY (\"building_id\") REFERENCES \"buildings\"(\"id\"),\nFOREIGN KEY (\"company_id\") REFERENCES \"Companies\"(\"id\")\n);"
    },
    "concert_singer": {
        "stadium": "CREATE TABLE stadium (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n);",
        "singer": "CREATE TABLE singer (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n);",
        "concert": "CREATE TABLE concert (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n);",
        "singer_in_concert": "CREATE TABLE singer_in_concert (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n);"
    },
    "county_public_safety": {
        "county_public_safety": "CREATE TABLE county_public_safety (\n\"County_ID\" int,\n\"Name\" text,\n\"Population\" int,\n\"Police_officers\" int,\n\"Residents_per_officer\" int,\n\"Case_burden\" int,\n\"Crime_rate\" real,\n\"Police_force\" text,\n\"Location\" text,\nPRIMARY KEY (\"County_ID\")\n);",
        "city": "CREATE TABLE city (\n\"City_ID\" int,\n\"County_ID\" int,\n\"Name\" text,\n\"White\" real,\n\"Black\" real,\n\"Amerindian\" real,\n\"Asian\" real,\n\"Multiracial\" real,\n\"Hispanic\" real,\nPRIMARY KEY (\"City_ID\"),\nFOREIGN KEY (\"County_ID\") REFERENCES \"county_public_safety\"(\"County_ID\")\n);"
    },
    "course_teach": {
        "course": "CREATE TABLE course (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n);",
        "teacher": "CREATE TABLE teacher (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n);",
        "course_arrange": "CREATE TABLE course_arrange (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n);"
    },
    "cre_Doc_Control_Systems": {
        "Ref_Document_Types": "CREATE TABLE Ref_Document_Types (\ndocument_type_code CHAR(15) NOT NULL,\ndocument_type_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (document_type_code)\n);",
        "Roles": "CREATE TABLE Roles (\nrole_code CHAR(15) NOT NULL,\nrole_description VARCHAR(255),\nPRIMARY KEY (role_code)\n);",
        "Addresses": "CREATE TABLE Addresses (\naddress_id INTEGER NOT NULL,\naddress_details VARCHAR(255),\nPRIMARY KEY (address_id)\n);",
        "Ref_Document_Status": "CREATE TABLE Ref_Document_Status (\ndocument_status_code CHAR(15) NOT NULL,\ndocument_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (document_status_code)\n);",
        "Ref_Shipping_Agents": "CREATE TABLE Ref_Shipping_Agents (\nshipping_agent_code CHAR(15) NOT NULL,\nshipping_agent_name VARCHAR(255) NOT NULL,\nshipping_agent_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (shipping_agent_code)\n);",
        "Documents": "CREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\ndocument_status_code CHAR(15) NOT NULL,\ndocument_type_code CHAR(15) NOT NULL,\nshipping_agent_code CHAR(15),\nreceipt_date DATETIME,\nreceipt_number VARCHAR(255),\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code),\nFOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code),\nFOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code)\n);",
        "Employees": "CREATE TABLE Employees (\nemployee_id INTEGER NOT NULL,\nrole_code CHAR(15) NOT NULL,\nemployee_name VARCHAR(255),\nother_details VARCHAR(255),\nPRIMARY KEY (employee_id),\nFOREIGN KEY (role_code) REFERENCES Roles (role_code)\n);",
        "Document_Drafts": "CREATE TABLE Document_Drafts (\ndocument_id INTEGER NOT NULL,\ndraft_number INTEGER NOT NULL,\ndraft_details VARCHAR(255),\nPRIMARY KEY (document_id, draft_number),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id)\n);",
        "Draft_Copies": "CREATE TABLE Draft_Copies (\ndocument_id INTEGER NOT NULL,\ndraft_number INTEGER NOT NULL,\ncopy_number INTEGER NOT NULL,\nPRIMARY KEY (document_id, draft_number, copy_number),\nFOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number)\n);",
        "Circulation_History": "CREATE TABLE Circulation_History (\ndocument_id INTEGER NOT NULL,\ndraft_number INTEGER NOT NULL,\ncopy_number INTEGER NOT NULL,\nemployee_id INTEGER NOT NULL,\nPRIMARY KEY (document_id, draft_number, copy_number, employee_id),\nFOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number),\nFOREIGN KEY (employee_id) REFERENCES Employees (employee_id)\n);",
        "Documents_Mailed": "CREATE TABLE Documents_Mailed (\ndocument_id INTEGER NOT NULL,\nmailed_to_address_id INTEGER NOT NULL,\nmailing_date DATETIME,\nPRIMARY KEY (document_id, mailed_to_address_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id)\n);"
    },
    "cre_Doc_Template_Mgt": {
        "Ref_Template_Types": "CREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n);",
        "Templates": "CREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n);",
        "Documents": "CREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n);",
        "Paragraphs": "CREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n);"
    },
    "cre_Doc_Tracking_DB": {
        "Ref_Document_Types": "CREATE TABLE Ref_Document_Types (\nDocument_Type_Code CHAR(15) NOT NULL,\nDocument_Type_Name VARCHAR(255) NOT NULL,\nDocument_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Type_Code)\n);",
        "Ref_Calendar": "CREATE TABLE Ref_Calendar (\nCalendar_Date DATETIME NOT NULL,\nDay_Number INTEGER,\nPRIMARY KEY (Calendar_Date)\n);",
        "Ref_Locations": "CREATE TABLE Ref_Locations (\nLocation_Code CHAR(15) NOT NULL,\nLocation_Name VARCHAR(255) NOT NULL,\nLocation_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Location_Code)\n);",
        "Roles": "CREATE TABLE Roles (\nRole_Code CHAR(15) NOT NULL,\nRole_Name VARCHAR(255),\nRole_Description VARCHAR(255),\nPRIMARY KEY (Role_Code)\n);",
        "All_Documents": "CREATE TABLE All_Documents (\nDocument_ID INTEGER NOT NULL,\nDate_Stored DATETIME,\nDocument_Type_Code CHAR(15) NOT NULL,\nDocument_Name CHAR(255),\nDocument_Description CHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code),\nFOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date)\n);",
        "Employees": "CREATE TABLE Employees (\nEmployee_ID INTEGER NOT NULL,\nRole_Code CHAR(15) NOT NULL,\nEmployee_Name VARCHAR(255),\nGender_MFU CHAR(1) NOT NULL,\nDate_of_Birth DATETIME NOT NULL,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Employee_ID),\nFOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code)\n);",
        "Document_Locations": "CREATE TABLE Document_Locations (\nDocument_ID INTEGER NOT NULL,\nLocation_Code CHAR(15) NOT NULL,\nDate_in_Location_From DATETIME NOT NULL,\nDate_in_Locaton_To DATETIME,\nPRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From),\nFOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code),\nFOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date),\nFOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date),\nFOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID)\n);",
        "Documents_to_be_Destroyed": "CREATE TABLE Documents_to_be_Destroyed (\nDocument_ID INTEGER NOT NULL,\nDestruction_Authorised_by_Employee_ID INTEGER,\nDestroyed_by_Employee_ID INTEGER,\nPlanned_Destruction_Date DATETIME,\nActual_Destruction_Date DATETIME,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID),\nFOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID),\nFOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date),\nFOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date),\nFOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID)\n);"
    },
    "cre_Docs_and_Epenses": {
        "Ref_Document_Types": "CREATE TABLE Ref_Document_Types (\nDocument_Type_Code CHAR(15) NOT NULL,\nDocument_Type_Name VARCHAR(255) NOT NULL,\nDocument_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Type_Code)\n);",
        "Ref_Budget_Codes": "CREATE TABLE Ref_Budget_Codes (\nBudget_Type_Code CHAR(15) NOT NULL,\nBudget_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Budget_Type_Code)\n);",
        "Projects": "CREATE TABLE Projects (\nProject_ID INTEGER NOT NULL,\nProject_Details VARCHAR(255),\nPRIMARY KEY (Project_ID)\n);",
        "Documents": "CREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nDocument_Type_Code CHAR(15) NOT NULL,\nProject_ID INTEGER NOT NULL,\nDocument_Date DATETIME,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code),\nFOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID)\n);",
        "Statements": "CREATE TABLE Statements (\nStatement_ID INTEGER NOT NULL,\nStatement_Details VARCHAR(255),\nPRIMARY KEY (Statement_ID),\nFOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID)\n);",
        "Documents_with_Expenses": "CREATE TABLE Documents_with_Expenses (\nDocument_ID INTEGER NOT NULL,\nBudget_Type_Code CHAR(15) NOT NULL,\nDocument_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n);",
        "Accounts": "CREATE TABLE Accounts (\nAccount_ID INTEGER NOT NULL,\nStatement_ID INTEGER NOT NULL,\nAccount_Details VARCHAR(255),\nPRIMARY KEY (Account_ID),\nFOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID)\n);"
    },
    "cre_Drama_Workshop_Groups": {
        "Ref_Payment_Methods": "CREATE TABLE Ref_Payment_Methods (\npayment_method_code CHAR(10) NOT NULL,\npayment_method_description VARCHAR(80),\nPRIMARY KEY (payment_method_code),\nUNIQUE (payment_method_code)\n);",
        "Ref_Service_Types": "CREATE TABLE Ref_Service_Types (\nService_Type_Code CHAR(15) NOT NULL,\nParent_Service_Type_Code CHAR(15),\nService_Type_Description VARCHAR(255),\nPRIMARY KEY (Service_Type_Code),\nUNIQUE (Service_Type_Code)\n);",
        "Addresses": "CREATE TABLE Addresses (\nAddress_ID VARCHAR(100) NOT NULL,\nLine_1 VARCHAR(255),\nLine_2 VARCHAR(255),\nCity_Town VARCHAR(255),\nState_County VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Address_ID),\nUNIQUE (Address_ID)\n);",
        "Products": "CREATE TABLE Products (\nProduct_ID VARCHAR(100) NOT NULL,\nProduct_Name VARCHAR(255),\nProduct_Price DECIMAL(20,4),\nProduct_Description VARCHAR(255),\nOther_Product_Service_Details VARCHAR(255),\nPRIMARY KEY (Product_ID),\nUNIQUE (Product_ID)\n);",
        "Marketing_Regions": "CREATE TABLE Marketing_Regions (\nMarketing_Region_Code CHAR(15) NOT NULL,\nMarketing_Region_Name VARCHAR(255) NOT NULL,\nMarketing_Region_Descriptrion VARCHAR(255) NOT NULL,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Marketing_Region_Code),\nUNIQUE (Marketing_Region_Code)\n);",
        "Clients": "CREATE TABLE Clients (\nClient_ID INTEGER NOT NULL,\nAddress_ID INTEGER NOT NULL,\nCustomer_Email_Address VARCHAR(255),\nCustomer_Name VARCHAR(255),\nCustomer_Phone VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Client_ID),\nUNIQUE (Client_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)\n);",
        "Drama_Workshop_Groups": "CREATE TABLE Drama_Workshop_Groups (\nWorkshop_Group_ID INTEGER NOT NULL,\nAddress_ID INTEGER NOT NULL,\nCurrency_Code CHAR(15) NOT NULL,\nMarketing_Region_Code CHAR(15) NOT NULL,\nStore_Name VARCHAR(255),\nStore_Phone VARCHAR(255),\nStore_Email_Address VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Workshop_Group_ID),\nUNIQUE (Workshop_Group_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)\n);",
        "Performers": "CREATE TABLE Performers (\nPerformer_ID INTEGER NOT NULL,\nAddress_ID INTEGER NOT NULL,\nCustomer_Name VARCHAR(255),\nCustomer_Phone VARCHAR(255),\nCustomer_Email_Address VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Performer_ID),\nUNIQUE (Performer_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)\n);",
        "Customers": "CREATE TABLE Customers (\nCustomer_ID VARCHAR(100) NOT NULL,\nAddress_ID INTEGER NOT NULL,\nCustomer_Name VARCHAR(255),\nCustomer_Phone VARCHAR(255),\nCustomer_Email_Address VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Customer_ID),\nUNIQUE (Customer_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID)\n);",
        "Stores": "CREATE TABLE Stores (\nStore_ID VARCHAR(100) NOT NULL,\nAddress_ID INTEGER NOT NULL,\nMarketing_Region_Code CHAR(15) NOT NULL,\nStore_Name VARCHAR(255),\nStore_Phone VARCHAR(255),\nStore_Email_Address VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Store_ID),\nUNIQUE (Store_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID),\nFOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code)\n);",
        "Bookings": "CREATE TABLE Bookings (\nBooking_ID INTEGER NOT NULL ,\nCustomer_ID INTEGER NOT NULL,\nWorkshop_Group_ID VARCHAR(100) NOT NULL,\nStatus_Code CHAR(15) NOT NULL,\nStore_ID INTEGER NOT NULL,\nOrder_Date DATETIME NOT NULL,\nPlanned_Delivery_Date DATETIME NOT NULL,\nActual_Delivery_Date DATETIME NOT NULL,\nOther_Order_Details VARCHAR(255),\nPRIMARY KEY (Booking_ID),\nUNIQUE (Booking_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID),\nFOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID)\n);",
        "Performers_in_Bookings": "CREATE TABLE Performers_in_Bookings (\nOrder_ID INTEGER NOT NULL,\nPerformer_ID INTEGER NOT NULL,\nPRIMARY KEY (Order_ID, Performer_ID),\nFOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID),\nFOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID)\n);",
        "Customer_Orders": "CREATE TABLE Customer_Orders (\nOrder_ID INTEGER NOT NULL ,\nCustomer_ID INTEGER NOT NULL,\nStore_ID INTEGER NOT NULL,\nOrder_Date DATETIME NOT NULL,\nPlanned_Delivery_Date DATETIME NOT NULL,\nActual_Delivery_Date DATETIME NOT NULL,\nOther_Order_Details VARCHAR(255),\nPRIMARY KEY (Order_ID),\nUNIQUE (Order_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID),\nFOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID)\n);",
        "Order_Items": "CREATE TABLE Order_Items (\nOrder_Item_ID INTEGER NOT NULL ,\nOrder_ID INTEGER NOT NULL,\nProduct_ID INTEGER NOT NULL,\nOrder_Quantity VARCHAR(288),\nOther_Item_Details VARCHAR(255),\nPRIMARY KEY (Order_Item_ID),\nFOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID),\nFOREIGN KEY (Product_ID) REFERENCES Products (Product_ID)\n);",
        "Invoices": "CREATE TABLE Invoices (\nInvoice_ID INTEGER NOT NULL,\nOrder_ID INTEGER NOT NULL,\npayment_method_code CHAR(15),\nProduct_ID INTEGER NOT NULL,\nOrder_Quantity VARCHAR(288),\nOther_Item_Details VARCHAR(255),\nOrder_Item_ID INTEGER NOT NULL,\nPRIMARY KEY (Invoice_ID),\nFOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID),\nFOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID),\nFOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code)\n);",
        "Services": "CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Type_Code CHAR(15),\nWorkshop_Group_ID INTEGER NOT NULL,\nProduct_Description VARCHAR(255),\nProduct_Name VARCHAR(255),\nProduct_Price DECIMAL(20,4),\nOther_Product_Service_Details VARCHAR(255),\nPRIMARY KEY (Service_ID),\nUNIQUE (Service_ID),\nFOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID),\nFOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code)\n);",
        "Bookings_Services": "CREATE TABLE Bookings_Services (\nOrder_ID INTEGER NOT NULL,\nProduct_ID INTEGER NOT NULL,\nPRIMARY KEY (Order_ID, Product_ID),\nFOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID),\nFOREIGN KEY (Product_ID) REFERENCES Services (Service_ID)\n);",
        "Invoice_Items": "CREATE TABLE Invoice_Items (\nInvoice_Item_ID INTEGER NOT NULL ,\nInvoice_ID INTEGER NOT NULL,\nOrder_ID INTEGER NOT NULL,\nOrder_Item_ID INTEGER NOT NULL,\nProduct_ID INTEGER NOT NULL,\nOrder_Quantity INTEGER,\nOther_Item_Details VARCHAR(255),\nPRIMARY KEY (Invoice_Item_ID),\nFOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID),\nFOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID),\nFOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID)\n);"
    },
    "cre_Theme_park": {
        "Ref_Hotel_Star_Ratings": "CREATE TABLE Ref_Hotel_Star_Ratings (\nstar_rating_code CHAR(15) NOT NULL,\nstar_rating_description VARCHAR(80),\nPRIMARY KEY (star_rating_code),\nUNIQUE (star_rating_code)\n);",
        "Locations": "CREATE TABLE Locations (\nLocation_ID INTEGER NOT NULL,\nLocation_Name VARCHAR(255),\nAddress VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Location_ID)\n);",
        "Ref_Attraction_Types": "CREATE TABLE Ref_Attraction_Types (\nAttraction_Type_Code CHAR(15) NOT NULL,\nAttraction_Type_Description VARCHAR(255),\nPRIMARY KEY (Attraction_Type_Code),\nUNIQUE (Attraction_Type_Code)\n);",
        "Visitors": "CREATE TABLE Visitors (\nTourist_ID INTEGER NOT NULL,\nTourist_Details VARCHAR(255),\nPRIMARY KEY (Tourist_ID),\nUNIQUE (Tourist_ID)\n);",
        "Features": "CREATE TABLE Features (\nFeature_ID INTEGER NOT NULL,\nFeature_Details VARCHAR(255),\nPRIMARY KEY (Feature_ID)\n);",
        "Hotels": "CREATE TABLE Hotels (\nhotel_id INTEGER NOT NULL,\nstar_rating_code CHAR(15) NOT NULL,\npets_allowed_yn CHAR(1),\nprice_range real,\nother_hotel_details VARCHAR(255),\nPRIMARY KEY (hotel_id),\nFOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code)\n);",
        "Tourist_Attractions": "CREATE TABLE Tourist_Attractions (\nTourist_Attraction_ID INTEGER NOT NULL,\nAttraction_Type_Code CHAR(15) NOT NULL,\nLocation_ID INTEGER NOT NULL,\nHow_to_Get_There VARCHAR(255),\nName VARCHAR(255),\nDescription VARCHAR(255),\nOpening_Hours VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Tourist_Attraction_ID),\nFOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID),\nFOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code)\n);",
        "Street_Markets": "CREATE TABLE Street_Markets (\nMarket_ID INTEGER NOT NULL,\nMarket_Details VARCHAR(255),\nPRIMARY KEY (Market_ID),\nFOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Shops": "CREATE TABLE Shops (\nShop_ID INTEGER NOT NULL,\nShop_Details VARCHAR(255),\nPRIMARY KEY (Shop_ID),\nFOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Museums": "CREATE TABLE Museums (\nMuseum_ID INTEGER NOT NULL,\nMuseum_Details VARCHAR(255),\nPRIMARY KEY (Museum_ID),\nFOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Royal_Family": "CREATE TABLE Royal_Family (\nRoyal_Family_ID INTEGER NOT NULL,\nRoyal_Family_Details VARCHAR(255),\nPRIMARY KEY (Royal_Family_ID),\nFOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Theme_Parks": "CREATE TABLE Theme_Parks (\nTheme_Park_ID INTEGER NOT NULL,\nTheme_Park_Details VARCHAR(255),\nPRIMARY KEY (Theme_Park_ID),\nFOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Visits": "CREATE TABLE Visits (\nVisit_ID INTEGER NOT NULL,\nTourist_Attraction_ID INTEGER NOT NULL,\nTourist_ID INTEGER NOT NULL,\nVisit_Date DATETIME NOT NULL,\nVisit_Details VARCHAR(40) NOT NULL,\nPRIMARY KEY (Visit_ID),\nFOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID),\nFOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID)\n);",
        "Photos": "CREATE TABLE Photos (\nPhoto_ID INTEGER NOT NULL,\nTourist_Attraction_ID INTEGER NOT NULL,\nName VARCHAR(255),\nDescription VARCHAR(255),\nFilename VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Photo_ID),\nFOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Staff": "CREATE TABLE Staff (\nStaff_ID INTEGER NOT NULL,\nTourist_Attraction_ID INTEGER NOT NULL,\nName VARCHAR(40),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Staff_ID),\nFOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID)\n);",
        "Tourist_Attraction_Features": "CREATE TABLE Tourist_Attraction_Features (\nTourist_Attraction_ID INTEGER NOT NULL,\nFeature_ID INTEGER NOT NULL,\nPRIMARY KEY (Tourist_Attraction_ID, Feature_ID),\nFOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID),\nFOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID)\n);"
    },
    "csu_1": {
        "Campuses": "CREATE TABLE Campuses (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Campus\" TEXT, \n\t\"Location\" TEXT, \n\t\"County\" TEXT, \n\t\"Year\" INTEGER \n);",
        "csu_fees": "CREATE TABLE csu_fees ( \n\t\"Campus\" INTEGER PRIMARY KEY, \n\t\"Year\" INTEGER, \n\t\"CampusFee\" INTEGER,\n\tFOREIGN KEY (Campus) REFERENCES Campuses(Id)\n);",
        "degrees": "CREATE TABLE degrees ( \n\t\"Year\" INTEGER,\n\t\"Campus\" INTEGER, \n\t\"Degrees\" INTEGER,\n\tPRIMARY KEY (Year, Campus),\n\tFOREIGN KEY (Campus) REFERENCES Campuses(Id)\n);",
        "discipline_enrollments": "CREATE TABLE discipline_enrollments ( \n\t\"Campus\" INTEGER, \n\t\"Discipline\" INTEGER, \n\t\"Year\" INTEGER, \n\t\"Undergraduate\" INTEGER, \n\t\"Graduate\" INTEGER,\n\tPRIMARY KEY (Campus, Discipline),\n\tFOREIGN KEY (Campus) REFERENCES Campuses(Id)\n);",
        "enrollments": "CREATE TABLE enrollments ( \n\t\"Campus\" INTEGER, \n\t\"Year\" INTEGER, \n\t\"TotalEnrollment_AY\" INTEGER, \n\t\"FTE_AY\" INTEGER,\n\tPRIMARY KEY(Campus, Year),\n\tFOREIGN KEY (Campus) REFERENCES Campuses(Id)\n);",
        "faculty": "CREATE TABLE faculty ( \n\t\"Campus\" INTEGER, \n\t\"Year\" INTEGER, \n\t\"Faculty\" REAL,\n\tFOREIGN KEY (Campus) REFERENCES Campuses(Id) \n);"
    },
    "culture_company": {
        "book_club": "CREATE TABLE book_club (\n\"book_club_id\" int,\n\"Year\" int,\n\"Author_or_Editor\" text,\n\"Book_Title\" text,\n\"Publisher\" text,\n\"Category\" text,\n\"Result\" text,\nPRIMARY KEY (\"book_club_id\")\n);",
        "movie": "CREATE TABLE movie (\n\"movie_id\" int,\n\"Title\" text,\n\"Year\" int,\n\"Director\" text,\n\"Budget_million\" real,\n\"Gross_worldwide\" int,\nPRIMARY KEY(\"movie_id\")\n);",
        "culture_company": "CREATE TABLE culture_company (\n\"Company_name\" text,\n\"Type\" text,\n\"Incorporated_in\" text,\n\"Group_Equity_Shareholding\" real,\n\"book_club_id\" text,\n\"movie_id\" text,\nPRIMARY KEY(\"Company_name\"),\nFOREIGN KEY (\"book_club_id\") REFERENCES \"book_club\"(\"book_club_id\"),\nFOREIGN KEY (\"movie_id\") REFERENCES \"movie\"(\"movie_id\")\n);"
    },
    "customer_complaints": {
        "Staff": "CREATE TABLE Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`gender` VARCHAR(1),\n`first_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`email_address` VARCHAR(255),\n`phone_number` VARCHAR(80)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`customer_type_code` VARCHAR(20) NOT NULL,\n`address_line_1` VARCHAR(80),\n`address_line_2` VARCHAR(80),\n`town_city` VARCHAR(80),\n`state` VARCHAR(80),\n`email_address` VARCHAR(255),\n`phone_number` VARCHAR(80)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_category_code` VARCHAR(20) NOT NULL,\n`date_product_first_available` DATETIME,\n`date_product_discontinued` DATETIME,\n`product_name` VARCHAR(80),\n`product_description` VARCHAR(255),\n`product_price` DECIMAL(19,4)\n);",
        "Complaints": "CREATE TABLE Complaints (\n`complaint_id` INTEGER NOT NULL ,\n`product_id` INTEGER NOT NULL,\n`customer_id` INTEGER NOT NULL,\n`complaint_outcome_code` VARCHAR(20) NOT NULL,\n`complaint_status_code` VARCHAR(20) NOT NULL,\n`complaint_type_code` VARCHAR(20) NOT NULL,\n`date_complaint_raised` DATETIME,\n`date_complaint_closed` DATETIME,\n`staff_id` INTEGER NOT NULL ,\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);"
    },
    "customer_deliveries": {
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_name` VARCHAR(20),\n`product_price` DECIMAL(19,4),\n`product_description` VARCHAR(255)\n);",
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(80),\n`city` VARCHAR(50),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`payment_method` VARCHAR(10) NOT NULL,\n`customer_name` VARCHAR(80),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80),\n`date_became_customer` DATETIME\n);",
        "Regular_Orders": "CREATE TABLE Regular_Orders (\n`regular_order_id` INTEGER PRIMARY KEY,\n`distributer_id` INTEGER NOT NULL,\nFOREIGN KEY (`distributer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Regular_Order_Products": "CREATE TABLE Regular_Order_Products (\n`regular_order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` )\n);",
        "Actual_Orders": "CREATE TABLE Actual_Orders (\n`actual_order_id` INTEGER PRIMARY KEY,\n`order_status_code` VARCHAR(10) NOT NULL,\n`regular_order_id` INTEGER NOT NULL,\n`actual_order_date` DATETIME,\nFOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` )\n);",
        "Actual_Order_Products": "CREATE TABLE Actual_Order_Products (\n`actual_order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` )\n);",
        "Customer_Addresses": "CREATE TABLE Customer_Addresses (\n`customer_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_from` DATETIME NOT NULL,\n`address_type` VARCHAR(10) NOT NULL,\n`date_to` DATETIME,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Delivery_Routes": "CREATE TABLE Delivery_Routes (\n`route_id` INTEGER PRIMARY KEY,\n`route_name` VARCHAR(50),\n`other_route_details` VARCHAR(255)\n);",
        "Delivery_Route_Locations": "CREATE TABLE Delivery_Route_Locations (\n`location_code` VARCHAR(10) PRIMARY KEY,\n`route_id` INTEGER NOT NULL,\n`location_address_id` INTEGER NOT NULL,\n`location_name` VARCHAR(50),\nFOREIGN KEY (`location_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`route_id` ) REFERENCES `Delivery_Routes`(`route_id` )\n);",
        "Trucks": "CREATE TABLE Trucks (\n`truck_id` INTEGER PRIMARY KEY,\n`truck_licence_number` VARCHAR(20),\n`truck_details` VARCHAR(255)\n);",
        "Employees": "CREATE TABLE Employees (\n`employee_id` INTEGER PRIMARY KEY,\n`employee_address_id` INTEGER NOT NULL,\n`employee_name` VARCHAR(80),\n`employee_phone` VARCHAR(80),\nFOREIGN KEY (`employee_address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Order_Deliveries": "CREATE TABLE Order_Deliveries (\n`location_code` VARCHAR(10) NOT NULL,\n`actual_order_id` INTEGER NOT NULL,\n`delivery_status_code` VARCHAR(10) NOT NULL,\n`driver_employee_id` INTEGER NOT NULL,\n`truck_id` INTEGER NOT NULL,\n`delivery_date` DATETIME,\nFOREIGN KEY (`truck_id` ) REFERENCES `Trucks`(`truck_id` ),\nFOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` ),\nFOREIGN KEY (`location_code` ) REFERENCES `Delivery_Route_Locations`(`location_code` ),\nFOREIGN KEY (`driver_employee_id` ) REFERENCES `Employees`(`employee_id` )\n);"
    },
    "customers_and_addresses": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`address_content` VARCHAR(80),\n`city` VARCHAR(50),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_details` VARCHAR(255)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`payment_method` VARCHAR(15) NOT NULL,\n`customer_name` VARCHAR(80),\n`date_became_customer` DATETIME,\n`other_customer_details` VARCHAR(255)\n);",
        "Customer_Addresses": "CREATE TABLE Customer_Addresses (\n`customer_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_address_from` DATETIME NOT NULL,\n`address_type` VARCHAR(15) NOT NULL,\n`date_address_to` DATETIME,\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Customer_Contact_Channels": "CREATE TABLE Customer_Contact_Channels (\n`customer_id` INTEGER NOT NULL,\n`channel_code` VARCHAR(15) NOT NULL,\n`active_from_date` DATETIME NOT NULL,\n`active_to_date` DATETIME,\n`contact_number` VARCHAR(50) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Customer_Orders": "CREATE TABLE Customer_Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status` VARCHAR(15) NOT NULL,\n`order_date` DATETIME,\n`order_details` VARCHAR(255),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(15),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` )\n);"
    },
    "customers_and_invoices": {
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`gender` VARCHAR(1),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`town_city` VARCHAR(50),\n`state_county_province` VARCHAR(50),\n`country` VARCHAR(50)\n);",
        "Orders": "CREATE TABLE Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\n`order_details` VARCHAR(255),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Invoices": "CREATE TABLE Invoices (\n`invoice_number` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_date` DATETIME,\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);",
        "Accounts": "CREATE TABLE Accounts (\n`account_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`date_account_opened` DATETIME,\n`account_name` VARCHAR(50),\n`other_account_details` VARCHAR(255),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Product_Categories": "CREATE TABLE Product_Categories (\n`production_type_code` VARCHAR(15) PRIMARY KEY,\n`product_type_description` VARCHAR(80),\n`vat_rating` DECIMAL(19,4)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`production_type_code` VARCHAR(15) NOT NULL,\n`unit_price` DECIMAL(19,4),\n`product_name` VARCHAR(80),\n`product_color` VARCHAR(20),\n`product_size` VARCHAR(20),\nFOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` )\n);",
        "Financial_Transactions": "CREATE TABLE Financial_Transactions (\n`transaction_id` INTEGER NOT NULL ,\n`account_id` INTEGER NOT NULL,\n`invoice_number` INTEGER,\n`transaction_type` VARCHAR(15) NOT NULL,\n`transaction_date` DATETIME,\n`transaction_amount` DECIMAL(19,4),\n`transaction_comment` VARCHAR(255),\n`other_transaction_details` VARCHAR(255),\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` )\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`order_item_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`product_quantity` VARCHAR(50),\n`other_order_item_details` VARCHAR(255),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);",
        "Invoice_Line_Items": "CREATE TABLE Invoice_Line_Items (\n`order_item_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`product_title` VARCHAR(80),\n`product_quantity` VARCHAR(50),\n`product_price` DECIMAL(19,4),\n`derived_product_cost` DECIMAL(19,4),\n`derived_vat_payable` DECIMAL(19,4),\n`derived_total_cost` DECIMAL(19,4),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ),\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);"
    },
    "customers_and_products_contacts": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`city` VARCHAR(50),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);",
        "Contacts": "CREATE TABLE Contacts (\n`contact_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`gender` VARCHAR(1),\n`first_name` VARCHAR(80),\n`last_name` VARCHAR(50),\n`contact_phone` VARCHAR(80)\n);",
        "Customer_Address_History": "CREATE TABLE Customer_Address_History (\n`customer_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_from` DATETIME NOT NULL,\n`date_to` DATETIME,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Customer_Orders": "CREATE TABLE Customer_Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` )\n);"
    },
    "customers_campaigns_ecommerce": {
        "Premises": "CREATE TABLE Premises (\n`premise_id` INTEGER PRIMARY KEY,\n`premises_type` VARCHAR(15) NOT NULL,\n`premise_details` VARCHAR(255)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_category` VARCHAR(15) NOT NULL,\n`product_name` VARCHAR(80)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`payment_method` VARCHAR(15) NOT NULL,\n`customer_name` VARCHAR(80),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_login` VARCHAR(80),\n`customer_password` VARCHAR(10)\n);",
        "Mailshot_Campaigns": "CREATE TABLE Mailshot_Campaigns (\n`mailshot_id` INTEGER PRIMARY KEY,\n`product_category` VARCHAR(15),\n`mailshot_name` VARCHAR(80),\n`mailshot_start_date` DATETIME,\n`mailshot_end_date` DATETIME\n);",
        "Customer_Addresses": "CREATE TABLE Customer_Addresses (\n`customer_id` INTEGER NOT NULL,\n`premise_id` INTEGER NOT NULL,\n`date_address_from` DATETIME NOT NULL,\n`address_type_code` VARCHAR(15) NOT NULL,\n`date_address_to` DATETIME,\nFOREIGN KEY (`premise_id` ) REFERENCES `Premises`(`premise_id` )\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Customer_Orders": "CREATE TABLE Customer_Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(15) NOT NULL,\n`shipping_method_code` VARCHAR(15) NOT NULL,\n`order_placed_datetime` DATETIME NOT NULL,\n`order_delivered_datetime` DATETIME,\n`order_shipping_charges` VARCHAR(255),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Mailshot_Customers": "CREATE TABLE Mailshot_Customers (\n`mailshot_id` INTEGER NOT NULL,\n`customer_id` INTEGER NOT NULL,\n`outcome_code` VARCHAR(15) NOT NULL,\n`mailshot_customer_date` DATETIME,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ),\nFOREIGN KEY (`mailshot_id` ) REFERENCES `Mailshot_Campaigns`(`mailshot_id` )\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`item_id` INTEGER NOT NULL ,\n`order_item_status_code` VARCHAR(15) NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`item_status_code` VARCHAR(15),\n`item_delivered_datetime` DATETIME,\n`item_order_quantity` VARCHAR(80),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` )\n);"
    },
    "customers_card_transactions": {
        "Accounts": "CREATE TABLE Accounts (\n`account_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`account_name` VARCHAR(50),\n`other_account_details` VARCHAR(255)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`customer_first_name` VARCHAR(20),\n`customer_last_name` VARCHAR(20),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(255),\n`customer_email` VARCHAR(255),\n`other_customer_details` VARCHAR(255)\n);",
        "Customers_Cards": "CREATE TABLE Customers_Cards (\n`card_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`card_type_code` VARCHAR(15) NOT NULL,\n`card_number` VARCHAR(80),\n`date_valid_from` DATETIME,\n`date_valid_to` DATETIME,\n`other_card_details` VARCHAR(255)\n);",
        "Financial_Transactions": "CREATE TABLE Financial_Transactions (\n`transaction_id` INTEGER NOT NULL ,\n`previous_transaction_id` INTEGER,\n`account_id` INTEGER NOT NULL,\n`card_id` INTEGER NOT NULL,\n`transaction_type` VARCHAR(15) NOT NULL,\n`transaction_date` DATETIME,\n`transaction_amount` DOUBLE NULL,\n`transaction_comment` VARCHAR(255),\n`other_transaction_details` VARCHAR(255),\nFOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ),\nFOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` )\n);"
    },
    "debate": {
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"District\" text,\n\"Name\" text,\n\"Party\" text,\n\"Age\" int,\nPRIMARY KEY (\"People_ID\")\n);",
        "debate": "CREATE TABLE debate (\n\"Debate_ID\" int,\n\"Date\" text,\n\"Venue\" text,\n\"Num_of_Audience\" int,\nPRIMARY KEY (\"Debate_ID\")\n);",
        "debate_people": "CREATE TABLE debate_people (\n\"Debate_ID\" int,\n\"Affirmative\" int,\n\"Negative\" int,\n\"If_Affirmative_Win\" bool,\nPRIMARY KEY (\"Debate_ID\",\"Affirmative\",\"Negative\"),\nFOREIGN KEY (\"Debate_ID\") REFERENCES `debate`(\"Debate_ID\"),\nFOREIGN KEY (\"Affirmative\") REFERENCES `people`(\"People_ID\"),\nFOREIGN KEY (\"Negative\") REFERENCES `people`(\"People_ID\")\n);"
    },
    "decoration_competition": {
        "college": "CREATE TABLE college (\n\"College_ID\" int,\n\"Name\" text,\n\"Leader_Name\" text,\n\"College_Location\" text,\nPRIMARY KEY (\"College_ID\")\n);",
        "member": "CREATE TABLE member (\n\"Member_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"College_ID\" int,\nPRIMARY KEY (\"Member_ID\"),\nFOREIGN KEY (\"College_ID\") REFERENCES `college`(\"College_ID\")\n);",
        "round": "CREATE TABLE round (\n\"Round_ID\" int,\n\"Member_ID\" int,\n\"Decoration_Theme\" text,\n\"Rank_in_Round\" int,\nPRIMARY KEY (\"Member_ID\",\"Round_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES \"member\"(\"Member_ID\")\n);"
    },
    "department_management": {},
    "department_store": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);",
        "Staff": "CREATE TABLE Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`staff_gender` VARCHAR(1),\n`staff_name` VARCHAR(80)\n);",
        "Suppliers": "CREATE TABLE Suppliers (\n`supplier_id` INTEGER PRIMARY KEY,\n`supplier_name` VARCHAR(80),\n`supplier_phone` VARCHAR(80)\n);",
        "Department_Store_Chain": "CREATE TABLE Department_Store_Chain (\n`dept_store_chain_id` INTEGER PRIMARY KEY,\n`dept_store_chain_name` VARCHAR(80)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`payment_method_code` VARCHAR(10) NOT NULL,\n`customer_code` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(10) NOT NULL,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4)\n);",
        "Supplier_Addresses": "CREATE TABLE Supplier_Addresses (\n`supplier_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_from` DATETIME NOT NULL,\n`date_to` DATETIME,\nPRIMARY KEY (`supplier_id`, `address_id`),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` )\n);",
        "Customer_Addresses": "CREATE TABLE Customer_Addresses (\n`customer_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_from` DATETIME NOT NULL,\n`date_to` DATETIME,\nPRIMARY KEY (`customer_id`, `address_id`),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Customer_Orders": "CREATE TABLE Customer_Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`order_date` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Department_Stores": "CREATE TABLE Department_Stores (\n`dept_store_id` INTEGER PRIMARY KEY,\n`dept_store_chain_id` INTEGER,\n`store_name` VARCHAR(80),\n`store_address` VARCHAR(255),\n`store_phone` VARCHAR(80),\n`store_email` VARCHAR(80),\nFOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` )\n);",
        "Departments": "CREATE TABLE Departments (\n`department_id` INTEGER PRIMARY KEY,\n`dept_store_id` INTEGER NOT NULL,\n`department_name` VARCHAR(80),\nFOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` )\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`order_item_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);",
        "Product_Suppliers": "CREATE TABLE Product_Suppliers (\n`product_id` INTEGER NOT NULL,\n`supplier_id` INTEGER NOT NULL,\n`date_supplied_from` DATETIME NOT NULL,\n`date_supplied_to` DATETIME,\n`total_amount_purchased` VARCHAR(80),\n`total_value_purchased` DECIMAL(19,4),\nPRIMARY KEY (`product_id`, `supplier_id`),\nFOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);",
        "Staff_Department_Assignments": "CREATE TABLE Staff_Department_Assignments (\n`staff_id` INTEGER NOT NULL,\n`department_id` INTEGER NOT NULL,\n`date_assigned_from` DATETIME NOT NULL,\n`job_title_code` VARCHAR(10) NOT NULL,\n`date_assigned_to` DATETIME,\nPRIMARY KEY (`staff_id`, `department_id`),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n);"
    },
    "device": {
        "device": "CREATE TABLE device (\n\"Device_ID\" int,\n\"Device\" text,\n\"Carrier\" text,\n\"Package_Version\" text,\n\"Applications\" text,\n\"Software_Platform\" text,\nPRIMARY KEY (\"Device_ID\")\n);",
        "shop": "CREATE TABLE shop (\n\"Shop_ID\" int,\n\"Shop_Name\" text,\n\"Location\" text,\n\"Open_Date\" text,\n\"Open_Year\" int,\nPRIMARY KEY (\"Shop_ID\")\n);",
        "stock": "CREATE TABLE stock (\n\"Shop_ID\" int,\n\"Device_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Shop_ID\",\"Device_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`)\n);"
    },
    "document_management": {
        "Roles": "CREATE TABLE Roles (\n`role_code` VARCHAR(15) PRIMARY KEY,\n`role_description` VARCHAR(80)\n);",
        "Users": "CREATE TABLE Users (\n`user_id` INTEGER PRIMARY KEY,\n`role_code` VARCHAR(15) NOT NULL,\n`user_name` VARCHAR(40),\n`user_login` VARCHAR(40),\n`password` VARCHAR(40),\nFOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` )\n);",
        "Document_Structures": "CREATE TABLE Document_Structures (\n`document_structure_code` VARCHAR(15) PRIMARY KEY,\n`parent_document_structure_code` VARCHAR(15),\n`document_structure_description` VARCHAR(80)\n);",
        "Functional_Areas": "CREATE TABLE Functional_Areas (\n`functional_area_code` VARCHAR(15) PRIMARY KEY,\n`parent_functional_area_code` VARCHAR(15),\n`functional_area_description` VARCHAR(80) NOT NULL\n);",
        "Images": "CREATE TABLE Images (\n`image_id` INTEGER PRIMARY KEY,\n`image_alt_text` VARCHAR(80),\n`image_name` VARCHAR(40),\n`image_url` VARCHAR(255)\n);",
        "Documents": "CREATE TABLE Documents (\n`document_code` VARCHAR(15) PRIMARY KEY,\n`document_structure_code` VARCHAR(15) NOT NULL,\n`document_type_code` VARCHAR(15) NOT NULL,\n`access_count` INTEGER,\n`document_name` VARCHAR(80),\nFOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` )\n);",
        "Document_Functional_Areas": "CREATE TABLE Document_Functional_Areas (\n`document_code` VARCHAR(15) NOT NULL,\n`functional_area_code` VARCHAR(15) NOT NULL,\nFOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ),\nFOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` )\n);",
        "Document_Sections": "CREATE TABLE Document_Sections (\n`section_id` INTEGER PRIMARY KEY,\n`document_code` VARCHAR(15) NOT NULL,\n`section_sequence` INTEGER,\n`section_code` VARCHAR(20),\n`section_title` VARCHAR(80),\nFOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` )\n);",
        "Document_Sections_Images": "CREATE TABLE Document_Sections_Images (\n`section_id` INTEGER NOT NULL,\n`image_id` INTEGER NOT NULL,\nPRIMARY KEY (`section_id`,`image_id`),\nFOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ),\nFOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` )\n);"
    },
    "dog_kennels": {
        "Breeds": "CREATE TABLE Breeds (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n);",
        "Charges": "CREATE TABLE Charges (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n);",
        "Sizes": "CREATE TABLE Sizes (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n);",
        "Treatment_Types": "CREATE TABLE Treatment_Types (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n);",
        "Owners": "CREATE TABLE Owners (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n);",
        "Dogs": "CREATE TABLE Dogs (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n);",
        "Professionals": "CREATE TABLE Professionals (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n);",
        "Treatments": "CREATE TABLE Treatments (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n);"
    },
    "dorm_1": {
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Dorm": "CREATE TABLE Dorm (\n       dormid\t\tINTEGER,\n       dorm_name\tVARCHAR(20),\n       student_capacity\tINTEGER,\n       gender\t\t\tVARCHAR(1)\n) ;\n\ncreate table Dorm_amenity (\n       amenid\t\t\tINTEGER,\n       amenity_name\t\tVARCHAR(25)\n) ;\n\ncreate table Has_amenity (\n       dormid\t\t\tINTEGER,\n       amenid\t\t\t\tINTEGER,\n\tFOREIGN KEY (dormid) REFERENCES `Dorm`(dormid),\n\tFOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid)\n);",
        "Lives_in": "CREATE TABLE Lives_in (\n       stuid \t      INTEGER,\n       dormid\t\tINTEGER,\n       room_number\tINTEGER,\n\tFOREIGN KEY (stuid) REFERENCES `Student`(StuID),\n        FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid)\n);"
    },
    "driving_school": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`city` VARCHAR(50),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50)\n);",
        "Staff": "CREATE TABLE Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`staff_address_id` INTEGER NOT NULL,\n`nickname` VARCHAR(80),\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`date_of_birth` DATETIME,\n`date_joined_staff` DATETIME,\n`date_left_staff` DATETIME,\nFOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Vehicles": "CREATE TABLE Vehicles (\n`vehicle_id` INTEGER PRIMARY KEY,\n`vehicle_details` VARCHAR(255)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`customer_address_id` INTEGER NOT NULL,\n`customer_status_code` VARCHAR(15) NOT NULL,\n`date_became_customer` DATETIME,\n`date_of_birth` DATETIME,\n`first_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`amount_outstanding` DOUBLE NULL,\n`email_address` VARCHAR(250),\n`phone_number` VARCHAR(255),\n`cell_mobile_phone_number` VARCHAR(255),\nFOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Customer_Payments": "CREATE TABLE Customer_Payments (\n`customer_id` INTEGER NOT NULL,\n`datetime_payment` DATETIME NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\n`amount_payment` DOUBLE NULL,\nPRIMARY KEY (`customer_id`,`datetime_payment`),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Lessons": "CREATE TABLE Lessons (\n`lesson_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`lesson_status_code` VARCHAR(15) NOT NULL,\n`staff_id` INTEGER,\n`vehicle_id` INTEGER NOT NULL,\n`lesson_date` DATETIME,\n`lesson_time` VARCHAR(10),\n`price` DOUBLE NULL,\nFOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);"
    },
    "e_government": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`town_city` VARCHAR(50),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(50),\n`country` VARCHAR(50)\n);",
        "Services": "CREATE TABLE Services (\n`service_id` INTEGER PRIMARY KEY,\n`service_type_code` VARCHAR(15) NOT NULL,\n`service_name` VARCHAR(80),\n`service_descriptio` VARCHAR(255)\n);",
        "Forms": "CREATE TABLE Forms (\n`form_id` INTEGER PRIMARY KEY,\n`form_type_code` VARCHAR(15) NOT NULL,\n`service_id` INTEGER,\n`form_number` VARCHAR(50),\n`form_name` VARCHAR(80),\n`form_description` VARCHAR(255),\nFOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` )\n);",
        "Individuals": "CREATE TABLE Individuals (\n`individual_id` INTEGER PRIMARY KEY,\n`individual_first_name` VARCHAR(80),\n`individual_middle_name` VARCHAR(80),\n`inidividual_phone` VARCHAR(80),\n`individual_email` VARCHAR(80),\n`individual_address` VARCHAR(255),\n`individual_last_name` VARCHAR(80)\n);",
        "Organizations": "CREATE TABLE Organizations (\n`organization_id` INTEGER PRIMARY KEY,\n`date_formed` DATETIME,\n`organization_name` VARCHAR(255),\n`uk_vat_number` VARCHAR(20)\n);",
        "Parties": "CREATE TABLE Parties (\n`party_id` INTEGER PRIMARY KEY,\n`payment_method_code` VARCHAR(15) NOT NULL,\n`party_phone` VARCHAR(80),\n`party_email` VARCHAR(80)\n);",
        "Organization_Contact_Individuals": "CREATE TABLE Organization_Contact_Individuals (\n`individual_id` INTEGER NOT NULL,\n`organization_id` INTEGER NOT NULL,\n`date_contact_from` DATETIME NOT NULL,\n`date_contact_to` DATETIME,\nPRIMARY KEY (`individual_id`,`organization_id` ),\nFOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ),\nFOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` )\n);",
        "Party_Addresses": "CREATE TABLE Party_Addresses (\n`party_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`date_address_from` DATETIME NOT NULL,\n`address_type_code` VARCHAR(15) NOT NULL,\n`date_address_to` DATETIME,\nPRIMARY KEY (`party_id`, `address_id`),\nFOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` )\n);",
        "Party_Forms": "CREATE TABLE Party_Forms (\n`party_id` INTEGER NOT NULL,\n`form_id` INTEGER NOT NULL,\n`date_completion_started` DATETIME NOT NULL,\n`form_status_code` VARCHAR(15) NOT NULL,\n`date_fully_completed` DATETIME,\nPRIMARY KEY (`party_id`, `form_id`),\nFOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ),\nFOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` )\n);",
        "Party_Services": "CREATE TABLE Party_Services (\n`booking_id` INTEGER NOT NULL ,\n`customer_id` INTEGER NOT NULL,\n`service_id` INTEGER NOT NULL,\n`service_datetime` DATETIME NOT NULL,\n`booking_made_date` DATETIME,\nFOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` )\n);"
    },
    "e_learning": {
        "Course_Authors_and_Tutors": "CREATE TABLE Course_Authors_and_Tutors (\n`author_id` INTEGER PRIMARY KEY,\n`author_tutor_ATB` VARCHAR(3),\n`login_name` VARCHAR(40),\n`password` VARCHAR(40),\n`personal_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`family_name` VARCHAR(80),\n`gender_mf` VARCHAR(1),\n`address_line_1` VARCHAR(80)\n);",
        "Students": "CREATE TABLE Students (\n`student_id` INTEGER PRIMARY KEY,\n`date_of_registration` DATETIME,\n`date_of_latest_logon` DATETIME,\n`login_name` VARCHAR(40),\n`password` VARCHAR(10),\n`personal_name` VARCHAR(40),\n`middle_name` VARCHAR(40),\n`family_name` VARCHAR(40)\n);",
        "Subjects": "CREATE TABLE Subjects (\n`subject_id` INTEGER PRIMARY KEY,\n`subject_name` VARCHAR(120)\n);",
        "Courses": "CREATE TABLE Courses (\n`course_id` INTEGER PRIMARY KEY,\n`author_id` INTEGER NOT NULL,\n`subject_id` INTEGER NOT NULL,\n`course_name` VARCHAR(120),\n`course_description` VARCHAR(255),\nFOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ),\nFOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` )\n);",
        "Student_Course_Enrolment": "CREATE TABLE Student_Course_Enrolment (\n`registration_id` INTEGER PRIMARY KEY,\n`student_id` INTEGER NOT NULL,\n`course_id` INTEGER NOT NULL,\n`date_of_enrolment` DATETIME NOT NULL,\n`date_of_completion` DATETIME NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n);",
        "Student_Tests_Taken": "CREATE TABLE Student_Tests_Taken (\n`registration_id` INTEGER NOT NULL,\n`date_test_taken` DATETIME NOT NULL,\n`test_result` VARCHAR(255),\nFOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` )\n);"
    },
    "election": {
        "county": "CREATE TABLE county (\n\"County_Id\" int,\n\"County_name\" text,\n\"Population\" real,\n\"Zip_code\" text,\nPRIMARY KEY (\"County_Id\")\n);",
        "party": "CREATE TABLE party (\n\"Party_ID\" int,\n\"Year\" real,\n\"Party\" text,\n\"Governor\" text,\n\"Lieutenant_Governor\" text,\n\"Comptroller\" text,\n\"Attorney_General\" text,\n\"US_Senate\" text,\nPRIMARY KEY (\"Party_ID\")\n);",
        "election": "CREATE TABLE election (\n\"Election_ID\" int,\n\"Counties_Represented\" text,\n\"District\" int,\n\"Delegate\" text,\n\"Party\" int,\n\"First_Elected\" real,\n\"Committee\" text,\nPRIMARY KEY (\"Election_ID\"),\nFOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`),\nFOREIGN KEY (`District`) REFERENCES `county`(`County_Id`)\n);"
    },
    "election_representative": {
        "election": "CREATE TABLE election (\n\"Election_ID\" int,\n\"Representative_ID\" int,\n\"Date\" text,\n\"Votes\" real,\n\"Vote_Percent\" real,\n\"Seats\" real,\n\"Place\" real,\nPRIMARY KEY (\"Election_ID\"),\nFOREIGN KEY (\"Representative_ID\") REFERENCES `representative`(\"Representative_ID\")\n);",
        "representative": "CREATE TABLE representative (\n\"Representative_ID\" int,\n\"Name\" text,\n\"State\" text,\n\"Party\" text,\n\"Lifespan\" text,\nPRIMARY KEY (\"Representative_ID\")\n);"
    },
    "employee_hire_evaluation": {
        "employee": "CREATE TABLE employee (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n);",
        "shop": "CREATE TABLE shop (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n);",
        "hiring": "CREATE TABLE hiring (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n);",
        "evaluation": "CREATE TABLE evaluation (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n);"
    },
    "entertainment_awards": {
        "festival_detail": "CREATE TABLE festival_detail (\n\"Festival_ID\" int,\n\"Festival_Name\" text,\n\"Chair_Name\" text,\n\"Location\" text,\n\"Year\" int,\n\"Num_of_Audience\" int,\nPRIMARY KEY (\"Festival_ID\")\n);",
        "artwork": "CREATE TABLE artwork (\n\"Artwork_ID\" int,\n\"Type\" text,\n\"Name\" text,\nPRIMARY KEY (\"Artwork_ID\")\n);",
        "nomination": "CREATE TABLE nomination (\n\"Artwork_ID\" int,\n\"Festival_ID\" int,\n\"Result\" text,\nPRIMARY KEY (\"Artwork_ID\",\"Festival_ID\"),\nFOREIGN KEY (\"Artwork_ID\") REFERENCES `artwork`(\"Artwork_ID\"),\nFOREIGN KEY (\"Festival_ID\") REFERENCES `festival_detail`(\"Festival_ID\")\n);"
    },
    "entrepreneur": {
        "entrepreneur": "CREATE TABLE entrepreneur (\n\"Entrepreneur_ID\" int,\n\"People_ID\" int,\n\"Company\" text,\n\"Money_Requested\" real,\n\"Investor\" text,\nPRIMARY KEY (\"Entrepreneur_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES \"people\"(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Name\" text,\n\"Height\" real,\n\"Weight\" real,\n\"Date_of_Birth\" text,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "farm": {
        "city": "CREATE TABLE city (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n);",
        "farm": "CREATE TABLE farm (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n);",
        "farm_competition": "CREATE TABLE farm_competition (\n\"Competition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Host_city_ID\" int,\n\"Hosts\" text,\nPRIMARY KEY (\"Competition_ID\"),\nFOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`)\n);",
        "competition_record": "CREATE TABLE competition_record (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n);"
    },
    "film_rank": {
        "film": "CREATE TABLE film (\n\"Film_ID\" int,\n\"Title\" text,\n\"Studio\" text,\n\"Director\" text,\n\"Gross_in_dollar\" int,\nPRIMARY KEY (\"Film_ID\")\n);",
        "market": "CREATE TABLE market (\n\"Market_ID\" int,\n\"Country\" text,\n\"Number_cities\" int,\nPRIMARY KEY (\"Market_ID\")\n);",
        "film_market_estimation": "CREATE TABLE film_market_estimation (\n\"Estimation_ID\" int,\n\"Low_Estimate\" real,\n\"High_Estimate\" real,\n\"Film_ID\" int,\n\"Type\" text,\n\"Market_ID\" int,\n\"Year\" int,\nPRIMARY KEY (\"Estimation_ID\"),\nFOREIGN KEY (\"Film_ID\") REFERENCES film(\"Film_ID\"),\nFOREIGN KEY (\"Market_ID\") REFERENCES market(\"Market_ID\")\n);"
    },
    "flight_1": {
        "flight": "CREATE TABLE flight (\r\n\tflno number(4,0) primary key,\r\n\torigin varchar2(20),\r\n\tdestination varchar2(20),\r\n\tdistance number(6,0),\r\n\tdeparture_date date,\r\n\tarrival_date date,\r\n\tprice number(7,2),\r\n    aid number(9,0),\r\n    foreign key(\"aid\") references `aircraft`(\"aid\"));",
        "aircraft": "CREATE TABLE aircraft (\r\n\taid number(9,0) primary key,\r\n\tname varchar2(30),\r\n\tdistance number(6,0));",
        "employee": "CREATE TABLE employee (\r\n\teid number(9,0) primary key,\r\n\tname varchar2(30),\r\n\tsalary number(10,2));",
        "certificate": "CREATE TABLE certificate (\r\n\teid number(9,0),\r\n\taid number(9,0),\r\n\tprimary key(eid,aid),\r\n\tforeign key(\"eid\") references `employee`(\"eid\"),\r\n\tforeign key(\"aid\") references `aircraft`(\"aid\"));"
    },
    "flight_company": {
        "airport": "CREATE TABLE airport (\n\"id\" int,\n\"City\" text,\n\"Country\" text,\n\"IATA\" text,\n\"ICAO\" text,\n\"name\" text,\nprimary key(\"id\")\n);",
        "operate_company": "CREATE TABLE operate_company (\n\"id\" int,\n\"name\" text,\n\"Type\" text,\n\"Principal_activities\" text,\n\"Incorporated_in\" text,\n\"Group_Equity_Shareholding\" real,\nprimary key (\"id\")\n);",
        "flight": "CREATE TABLE flight (\n\"id\" int,\n\"Vehicle_Flight_number\" text,\n\"Date\" text,\n\"Pilot\" text,\n\"Velocity\" real,\n\"Altitude\" real,\n\"airport_id\" int,\n\"company_id\" int,\nprimary key (\"id\"),\nforeign key (\"airport_id\") references `airport`(\"id\"),\nforeign key (\"company_id\") references `operate_company`(\"id\")\n);"
    },
    "game_1": {
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Video_Games": "CREATE TABLE Video_Games (\n       GameID           INTEGER PRIMARY KEY,\n       GName            VARCHAR(40),\n       GType            VARCHAR(40)\n);",
        "Plays_Games": "CREATE TABLE Plays_Games (\n       StuID                INTEGER,\n       GameID            INTEGER,\n       Hours_Played      INTEGER,\n       FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n);",
        "SportsInfo": "CREATE TABLE SportsInfo (\n  StuID INTEGER,\n  SportName VARCHAR(32),\n  HoursPerWeek INTEGER,\n  GamesPlayed INTEGER,\n  OnScholarship VARCHAR(1),\n  FOREIGN KEY(StuID) REFERENCES Student(StuID)\n);"
    },
    "game_injury": {
        "stadium": "CREATE TABLE stadium (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n);",
        "game": "CREATE TABLE game (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n);",
        "injury_accident": "CREATE TABLE injury_accident (\n\"game_id\" int,\n\"id\" int,\n\"Player\" text,\n\"Injury\" text,\n\"Number_of_matches\" text,\n\"Source\" text,\nprimary key (\"id\"),\nforeign key (\"game_id\") references `game`(\"id\")\n);"
    },
    "gas_company": {
        "company": "CREATE TABLE company (\n\"Company_ID\" int,\n\"Rank\" int,\n\"Company\" text,\n\"Headquarters\" text,\n\"Main_Industry\" text,\n\"Sales_billion\" real,\n\"Profits_billion\" real,\n\"Assets_billion\" real,\n\"Market_Value\" real,\nPRIMARY KEY (\"Company_ID\")\n);",
        "gas_station": "CREATE TABLE gas_station (\n\"Station_ID\" int,\n\"Open_Year\" int,\n\"Location\" text,\n\"Manager_Name\" text,\n\"Vice_Manager_Name\" text,\n\"Representative_Name\" text,\nPRIMARY KEY (\"Station_ID\")\n);",
        "station_company": "CREATE TABLE station_company (\n\"Station_ID\" int,\n\"Company_ID\" int,\n\"Rank_of_the_Year\" int,\nPRIMARY KEY (\"Station_ID\",\"Company_ID\"),\nFOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`),\nFOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`)\n);"
    },
    "geo": {
        "state": "CREATE TABLE state (\n  `state_name` text\n,  `population` integer DEFAULT NULL\n,  `area` double DEFAULT NULL\n,  `country_name` varchar(3) NOT NULL DEFAULT ''\n,  `capital` text\n,  `density` double DEFAULT NULL\n,  PRIMARY KEY (`state_name`)\n);",
        "city": "CREATE TABLE city (\n  `city_name` text\n,  `population` integer DEFAULT NULL\n,  `country_name` varchar(3) NOT NULL DEFAULT ''\n,  `state_name` text\n,  PRIMARY KEY (`city_name`,`state_name`)\n,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)\n);",
        "border_info": "CREATE TABLE border_info (\n  `state_name` text\n,  `border` text\n,  PRIMARY KEY (`border`,`state_name`)\n,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)\n,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`)\n);",
        "highlow": "CREATE TABLE highlow (\n  `state_name` text\n,  `highest_elevation` text\n,  `lowest_point` text\n,  `highest_point` text\n,  `lowest_elevation` text\n,  PRIMARY KEY (`state_name`)\n,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)\n);",
        "lake": "CREATE TABLE lake (\n  `lake_name` text\n,  `area` double DEFAULT NULL\n,  `country_name` varchar(3) NOT NULL DEFAULT ''\n,  `state_name` text\n);",
        "mountain": "CREATE TABLE mountain (\n  `mountain_name` text\n,  `mountain_altitude` integer DEFAULT NULL\n,  `country_name` varchar(3) NOT NULL DEFAULT ''\n,  `state_name` text\n,  PRIMARY KEY (`mountain_name`, `state_name`)\n,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`)\n);",
        "river": "CREATE TABLE river (\n  `river_name` text\n,  `length` integer DEFAULT NULL\n,  `country_name` varchar(3) NOT NULL DEFAULT ''\n,  `traverse` text\n,  PRIMARY KEY (`river_name`)\n,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`)\n);"
    },
    "gymnast": {
        "gymnast": "CREATE TABLE gymnast (\n\"Gymnast_ID\" int,\n\"Floor_Exercise_Points\" real,\n\"Pommel_Horse_Points\" real,\n\"Rings_Points\" real,\n\"Vault_Points\" real,\n\"Parallel_Bars_Points\" real,\n\"Horizontal_Bar_Points\" real,\n\"Total_Points\" real,\nPRIMARY KEY (\"Gymnast_ID\"),\nFOREIGN KEY (\"Gymnast_ID\") REFERENCES \"people\"(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Name\" text,\n\"Age\" real,\n\"Height\" real,\n\"Hometown\" text,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "hospital_1": {
        "Physician": "CREATE TABLE Physician (\n  EmployeeID INTEGER NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Position VARCHAR(30) NOT NULL,\n  SSN INTEGER NOT NULL,\n  CONSTRAINT pk_physician PRIMARY KEY(EmployeeID)\n);",
        "Department": "CREATE TABLE Department (\n  DepartmentID INTEGER NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Head INTEGER NOT NULL,\n  CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),\n  CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID)\n);",
        "Affiliated_With": "CREATE TABLE Affiliated_With (\n  Physician INTEGER NOT NULL,\n  Department INTEGER NOT NULL,\n  PrimaryAffiliation BOOLEAN NOT NULL,\n  CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),\n  CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),\n  PRIMARY KEY(Physician, Department)\n);",
        "Procedures": "CREATE TABLE Procedures (\n  Code INTEGER PRIMARY KEY NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Cost REAL NOT NULL\n);",
        "Trained_In": "CREATE TABLE Trained_In (\n  Physician INTEGER NOT NULL,\n  Treatment INTEGER NOT NULL,\n  CertificationDate DATETIME NOT NULL,\n  CertificationExpires DATETIME NOT NULL,\n  CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),\n  CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),\n  PRIMARY KEY(Physician, Treatment)\n);",
        "Patient": "CREATE TABLE Patient (\n  SSN INTEGER PRIMARY KEY NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Address VARCHAR(30) NOT NULL,\n  Phone VARCHAR(30) NOT NULL,\n  InsuranceID INTEGER NOT NULL,\n  PCP INTEGER NOT NULL,\n  CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID)\n);",
        "Nurse": "CREATE TABLE Nurse (\n  EmployeeID INTEGER PRIMARY KEY NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Position VARCHAR(30) NOT NULL,\n  Registered BOOLEAN NOT NULL,\n  SSN INTEGER NOT NULL\n);",
        "Appointment": "CREATE TABLE Appointment (\n  AppointmentID INTEGER PRIMARY KEY NOT NULL,\n  Patient INTEGER NOT NULL,    \n  PrepNurse INTEGER,\n  Physician INTEGER NOT NULL,\n  Start DATETIME NOT NULL,\n  End DATETIME NOT NULL,\n  ExaminationRoom TEXT NOT NULL,\n  CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),\n  CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),\n  CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID)\n);",
        "Medication": "CREATE TABLE Medication (\n  Code INTEGER PRIMARY KEY NOT NULL,\n  Name VARCHAR(30) NOT NULL,\n  Brand VARCHAR(30) NOT NULL,\n  Description VARCHAR(30) NOT NULL\n);",
        "Prescribes": "CREATE TABLE Prescribes (\n  Physician INTEGER NOT NULL,\n  Patient INTEGER NOT NULL, \n  Medication INTEGER NOT NULL, \n  Date DATETIME NOT NULL,\n  Appointment INTEGER,  \n  Dose VARCHAR(30) NOT NULL,\n  PRIMARY KEY(Physician, Patient, Medication, Date),\n  CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),\n  CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),\n  CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),\n  CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID)\n);",
        "Block": "CREATE TABLE Block (\n  BlockFloor INTEGER NOT NULL,\n  BlockCode INTEGER NOT NULL,\n  PRIMARY KEY(BlockFloor, BlockCode)\n);",
        "Room": "CREATE TABLE Room (\n  RoomNumber INTEGER PRIMARY KEY NOT NULL,\n  RoomType VARCHAR(30) NOT NULL,\n  BlockFloor INTEGER NOT NULL,  \n  BlockCode INTEGER NOT NULL,  \n  Unavailable BOOLEAN NOT NULL,\n  CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)\n);",
        "On_Call": "CREATE TABLE On_Call (\n  Nurse INTEGER NOT NULL,\n  BlockFloor INTEGER NOT NULL, \n  BlockCode INTEGER NOT NULL,\n  OnCallStart DATETIME NOT NULL,\n  OnCallEnd DATETIME NOT NULL,\n  PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),\n  CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),\n  CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) \n);",
        "Stay": "CREATE TABLE Stay (\n  StayID INTEGER PRIMARY KEY NOT NULL,\n  Patient INTEGER NOT NULL,\n  Room INTEGER NOT NULL,\n  StayStart DATETIME NOT NULL,\n  StayEnd DATETIME NOT NULL,\n  CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),\n  CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber)\n);",
        "Undergoes": "CREATE TABLE Undergoes (\n  Patient INTEGER NOT NULL,\n  Procedures INTEGER NOT NULL,\n  Stay INTEGER NOT NULL,\n  DateUndergoes DATETIME NOT NULL,\n  Physician INTEGER NOT NULL,\n  AssistingNurse INTEGER,\n  PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),\n  CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),\n  CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),\n  CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),\n  CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),\n  CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID)\n);"
    },
    "hr_1": {},
    "imdb": {
        "actor": "CREATE TABLE actor (\n\"aid\" int,\n\"gender\" text,\n\"name\" text,\n\"nationality\" text,\n\"birth_city\" text,\n\"birth_year\" int,\nprimary key(\"aid\")\n);",
        "copyright": "CREATE TABLE copyright (\n\"id\" int,\n\"msid\" int,\n\"cid\" int,\nprimary key(\"id\")\n);",
        "cast": "CREATE TABLE cast (\n\"id\" int,\n\"msid\" int,\n\"aid\" int,\n\"role\" int,\nprimary key(\"id\"),\nforeign key(\"aid\") references `actor`(\"aid\"),\nforeign key(\"msid\") references `copyright`(\"msid\")\n);",
        "genre": "CREATE TABLE genre (\n\"gid\" int,\n\"genre\" text,\nprimary key(\"gid\")\n);",
        "classification": "CREATE TABLE classification (\n\"id\" int,\n\"msid\" int,\n\"gid\" int,\nprimary key(\"id\"),\nforeign key(\"gid\") references `genre`(\"gid\"),\nforeign key(\"msid\") references `copyright`(\"msid\")\n);",
        "company": "CREATE TABLE company (\n\"id\" int,\n\"name\" text,\n\"country_code\" text,\nprimary key(\"id\")\n);",
        "director": "CREATE TABLE director (\n\"did\" int,\n\"gender\" text,\n\"name\" text,\n\"nationality\" text,\n\"birth_city\" text,\n\"birth_year\" int,\nprimary key(\"did\")\n);",
        "producer": "CREATE TABLE producer (\n\"pid\" int,\n\"gender\" text,\n\"name\" text,\n\"nationality\" text,\n\"birth_city\" text,\n\"birth_year\" int,\nprimary key(\"pid\")\n);",
        "directed_by": "CREATE TABLE directed_by (\n\"id\" int,\n\"msid\" int,\n\"did\" int,\nprimary key(\"id\"),\nforeign key(\"msid\") references `copyright`(\"msid\"),\nforeign key(\"did\") references `director`(\"did\")\n);",
        "keyword": "CREATE TABLE keyword (\n\"id\" int,\n\"keyword\" text,\nprimary key(\"id\")\n);",
        "made_by": "CREATE TABLE made_by (\n\"id\" int,\n\"msid\" int,\n\"pid\" int,\nprimary key(\"id\"),\nforeign key(\"msid\") references `copyright`(\"msid\"),\nforeign key(\"pid\") references `producer`(\"pid\")\n);",
        "movie": "CREATE TABLE movie (\n\"mid\" int,\n\"title\" text,\n\"release_year\" int,\n\"title_aka\" text,\n\"budget\" text,\nprimary key(\"mid\")\n);",
        "tags": "CREATE TABLE tags (\n\"id\" int,\n\"msid\" int,\n\"kid\" int,\nprimary key(\"id\"),\nforeign key(\"msid\") references `copyright`(\"msid\"),\nforeign key(\"kid\") references `keyword`(\"kid\")\n);",
        "tv_series": "CREATE TABLE tv_series (\n\"sid\" int,\n\"title\" text,\n\"release_year\" int,\n\"num_of_seasons\" int,\n\"num_of_episodes\" int,\n\"title_aka\" text,\n\"budget\" text,\nprimary key(\"sid\")\n);",
        "writer": "CREATE TABLE writer (\n\"wid\" int,\n\"gender\" text,\n\"name\" int,\n\"nationality\" int,\n\"num_of_episodes\" int,\n\"birth_city\" text,\n\"birth_year\" int,\nprimary key(\"wid\")\n);",
        "written_by": "CREATE TABLE written_by (\n\"id\" int,\n\"msid\" int,\n\"wid\" int,\nforeign key(\"msid\") references `copyright`(\"msid\"),\nforeign key(\"wid\") references `writer`(\"wid\")\n);"
    },
    "insurance_and_eClaims": {
        "Customers": "CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);",
        "Staff": "CREATE TABLE Staff (\nStaff_ID INTEGER NOT NULL,\nStaff_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Staff_ID)\n);",
        "Policies": "CREATE TABLE Policies (\nPolicy_ID INTEGER NOT NULL,\nCustomer_ID INTEGER NOT NULL,\nPolicy_Type_Code CHAR(15) NOT NULL,\nStart_Date DATETIME,\nEnd_Date DATETIME,\nPRIMARY KEY (Policy_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);",
        "Claim_Headers": "CREATE TABLE Claim_Headers (\nClaim_Header_ID INTEGER NOT NULL,\nClaim_Status_Code CHAR(15) NOT NULL,\nClaim_Type_Code CHAR(15) NOT NULL,\nPolicy_ID INTEGER NOT NULL,\nDate_of_Claim DATETIME,\nDate_of_Settlement DATETIME,\nAmount_Claimed DECIMAL(20,4),\nAmount_Piad DECIMAL(20,4),\nPRIMARY KEY (Claim_Header_ID),\nFOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID)\n);",
        "Claims_Documents": "CREATE TABLE Claims_Documents (\nClaim_ID INTEGER NOT NULL,\nDocument_Type_Code CHAR(15) NOT NULL,\nCreated_by_Staff_ID INTEGER,\nCreated_Date INTEGER,\nPRIMARY KEY (Claim_ID, Document_Type_Code),\nFOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID),\nFOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID)\n);",
        "Claims_Processing_Stages": "CREATE TABLE Claims_Processing_Stages (\nClaim_Stage_ID INTEGER NOT NULL,\nNext_Claim_Stage_ID INTEGER,\nClaim_Status_Name VARCHAR(255) NOT NULL,\nClaim_Status_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Claim_Stage_ID)\n);",
        "Claims_Processing": "CREATE TABLE Claims_Processing (\nClaim_Processing_ID INTEGER NOT NULL,\nClaim_ID INTEGER NOT NULL,\nClaim_Outcome_Code CHAR(15) NOT NULL,\nClaim_Stage_ID INTEGER NOT NULL,\nStaff_ID INTEGER,\nPRIMARY KEY (Claim_Processing_ID),\nFOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID),\nFOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID)\n);"
    },
    "insurance_fnol": {
        "Customers": "CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_name VARCHAR(40),\nPRIMARY KEY (Customer_ID)\n);",
        "Services": "CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_name VARCHAR(40),\nPRIMARY KEY (Service_ID)\n);",
        "Available_Policies": "CREATE TABLE Available_Policies (\nPolicy_ID INTEGER NOT NULL,\npolicy_type_code CHAR(15),\nCustomer_Phone VARCHAR(255),\nPRIMARY KEY (Policy_ID),\nUNIQUE (Policy_ID)\n);",
        "Customers_Policies": "CREATE TABLE Customers_Policies (\nCustomer_ID INTEGER NOT NULL,\nPolicy_ID INTEGER NOT NULL,\nDate_Opened DATE,\nDate_Closed DATE,\nPRIMARY KEY (Customer_ID, Policy_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID),\nFOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID)\n);",
        "First_Notification_of_Loss": "CREATE TABLE First_Notification_of_Loss (\nFNOL_ID INTEGER NOT NULL,\nCustomer_ID INTEGER NOT NULL,\nPolicy_ID INTEGER NOT NULL,\nService_ID INTEGER NOT NULL,\nPRIMARY KEY (FNOL_ID),\nUNIQUE (FNOL_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID)\n);",
        "Claims": "CREATE TABLE Claims (\nClaim_ID INTEGER NOT NULL,\nFNOL_ID INTEGER NOT NULL,\nEffective_Date DATE,\nPRIMARY KEY (Claim_ID),\nUNIQUE (Claim_ID),\nFOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID)\n);",
        "Settlements": "CREATE TABLE Settlements (\nSettlement_ID INTEGER NOT NULL,\nClaim_ID INTEGER,\nEffective_Date DATE,\nSettlement_Amount REAL,\nPRIMARY KEY (Settlement_ID),\nUNIQUE (Settlement_ID),\nFOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID)\n);"
    },
    "insurance_policies": {
        "Customers": "CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);",
        "Customer_Policies": "CREATE TABLE Customer_Policies (\nPolicy_ID INTEGER NOT NULL,\nCustomer_ID INTEGER NOT NULL,\nPolicy_Type_Code CHAR(15) NOT NULL,\nStart_Date DATE,\nEnd_Date DATE,\nPRIMARY KEY (Policy_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);",
        "Claims": "CREATE TABLE Claims (\nClaim_ID INTEGER NOT NULL,\nPolicy_ID INTEGER NOT NULL,\nDate_Claim_Made DATE,\nDate_Claim_Settled DATE,\nAmount_Claimed INTEGER,\nAmount_Settled INTEGER,\nPRIMARY KEY (Claim_ID),\nFOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID)\n);",
        "Settlements": "CREATE TABLE Settlements (\nSettlement_ID INTEGER NOT NULL,\nClaim_ID INTEGER NOT NULL,\nDate_Claim_Made DATE,\nDate_Claim_Settled DATE,\nAmount_Claimed INTEGER,\nAmount_Settled INTEGER,\nCustomer_Policy_ID INTEGER NOT NULL,\nPRIMARY KEY (Settlement_ID),\nFOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID)\n);",
        "Payments": "CREATE TABLE Payments (\nPayment_ID INTEGER NOT NULL,\nSettlement_ID INTEGER NOT NULL,\nPayment_Method_Code VARCHAR(255),\nDate_Payment_Made DATE,\nAmount_Payment INTEGER,\nPRIMARY KEY (Payment_ID),\nFOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID)\n);"
    },
    "journal_committee": {},
    "loan_1": {
        "bank": "CREATE TABLE bank (\nbranch_ID int PRIMARY KEY,\nbname varchar(20),\nno_of_customers int,\ncity varchar(10),\nstate varchar(20));",
        "customer": "CREATE TABLE customer (\ncust_ID varchar(3) PRIMARY KEY,\ncust_name varchar(20),\nacc_type char(1),\nacc_bal int,\nno_of_loans int,\ncredit_score int,\nbranch_ID int,\nstate varchar(20),\nFOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));",
        "loan": "CREATE TABLE loan (\nloan_ID varchar(3) PRIMARY KEY,\nloan_type varchar(15),\ncust_ID varchar(3),\nbranch_ID varchar(3),\namount int,\nFOREIGN KEY(branch_ID) REFERENCES bank(branch_ID),\nFOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));"
    },
    "local_govt_and_lot": {
        "Customers": "CREATE TABLE Customers (\ncustomer_id INTEGER NOT NULL,\ncustomer_details VARCHAR(255),\nPRIMARY KEY (customer_id)\n);",
        "Properties": "CREATE TABLE Properties (\nproperty_id INTEGER NOT NULL,\nproperty_type_code CHAR(15) NOT NULL,\nproperty_address VARCHAR(255),\nother_details VARCHAR(255),\nPRIMARY KEY (property_id)\n);",
        "Residents": "CREATE TABLE Residents (\nresident_id INTEGER NOT NULL,\nproperty_id INTEGER NOT NULL,\ndate_moved_in DATETIME NOT NULL,\ndate_moved_out DATETIME NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (resident_id, property_id, date_moved_in),\nFOREIGN KEY (property_id) REFERENCES Properties (property_id)\n);",
        "Organizations": "CREATE TABLE Organizations (\norganization_id INTEGER NOT NULL,\nparent_organization_id INTEGER,\norganization_details VARCHAR(255),\nPRIMARY KEY (organization_id)\n);",
        "Services": "CREATE TABLE Services (\nservice_id INTEGER NOT NULL,\norganization_id INTEGER NOT NULL,\nservice_type_code CHAR(15) NOT NULL,\nservice_details VARCHAR(255),\nPRIMARY KEY (service_id),\nFOREIGN KEY (organization_id) REFERENCES Organizations (organization_id)\n);",
        "Residents_Services": "CREATE TABLE Residents_Services (\nresident_id INTEGER NOT NULL,\nservice_id INTEGER NOT NULL,\ndate_moved_in DATETIME,\nproperty_id INTEGER,\ndate_requested DATETIME,\ndate_provided DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (resident_id, service_id),\nFOREIGN KEY (service_id) REFERENCES Services (service_id),\nFOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in)\n);",
        "Things": "CREATE TABLE Things (\nthing_id INTEGER NOT NULL,\norganization_id INTEGER NOT NULL,\nType_of_Thing_Code CHAR(15) NOT NULL,\nservice_type_code CHAR(10) NOT NULL,\nservice_details VARCHAR(255),\nPRIMARY KEY (thing_id),\nFOREIGN KEY (organization_id) REFERENCES Organizations (organization_id)\n);",
        "Customer_Events": "CREATE TABLE Customer_Events (\nCustomer_Event_ID INTEGER NOT NULL,\ncustomer_id INTEGER,\ndate_moved_in DATETIME,\nproperty_id INTEGER,\nresident_id INTEGER,\nthing_id INTEGER NOT NULL,\nPRIMARY KEY (Customer_Event_ID),\nFOREIGN KEY (thing_id) REFERENCES Things (thing_id),\nFOREIGN KEY (customer_id) REFERENCES Customers (customer_id),\nFOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in)\n);",
        "Customer_Event_Notes": "CREATE TABLE Customer_Event_Notes (\nCustomer_Event_Note_ID INTEGER NOT NULL,\nCustomer_Event_ID INTEGER NOT NULL,\nservice_type_code CHAR(15) NOT NULL,\nresident_id INTEGER NOT NULL,\nproperty_id INTEGER NOT NULL,\ndate_moved_in DATETIME NOT NULL,\nPRIMARY KEY (Customer_Event_Note_ID),\nFOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID)\n);",
        "Timed_Status_of_Things": "CREATE TABLE Timed_Status_of_Things (\nthing_id INTEGER NOT NULL,\nDate_and_Date DATETIME NOT NULL,\nStatus_of_Thing_Code CHAR(15) NOT NULL,\nPRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code),\nFOREIGN KEY (thing_id) REFERENCES Things (thing_id)\n);",
        "Timed_Locations_of_Things": "CREATE TABLE Timed_Locations_of_Things (\nthing_id INTEGER NOT NULL,\nDate_and_Time DATETIME NOT NULL,\nLocation_Code CHAR(15) NOT NULL,\nPRIMARY KEY (thing_id, Date_and_Time, Location_Code),\nFOREIGN KEY (thing_id) REFERENCES Things (thing_id));"
    },
    "local_govt_in_alabama": {
        "Services": "CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Type_Code CHAR(15) NOT NULL,\nPRIMARY KEY (Service_ID)\n);",
        "Participants": "CREATE TABLE Participants (\nParticipant_ID INTEGER NOT NULL,\nParticipant_Type_Code CHAR(15) NOT NULL,\nParticipant_Details VARCHAR(255),\nPRIMARY KEY (Participant_ID)\n);",
        "Events": "CREATE TABLE Events (\nEvent_ID INTEGER NOT NULL,\nService_ID INTEGER NOT NULL,\nEvent_Details VARCHAR(255),\nPRIMARY KEY (Event_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID)\n);",
        "Participants_in_Events": "CREATE TABLE Participants_in_Events (\nEvent_ID INTEGER NOT NULL,\nParticipant_ID INTEGER NOT NULL,\nPRIMARY KEY (Event_ID, Participant_ID),\nFOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)\n);"
    },
    "local_govt_mdm": {
        "Customer_Master_Index": "CREATE TABLE Customer_Master_Index (\nmaster_customer_id INTEGER NOT NULL,\ncmi_details VARCHAR(255),\nPRIMARY KEY (master_customer_id)\n);",
        "CMI_Cross_References": "CREATE TABLE CMI_Cross_References (\ncmi_cross_ref_id INTEGER NOT NULL,\nmaster_customer_id INTEGER NOT NULL,\nsource_system_code CHAR(15) NOT NULL,\nPRIMARY KEY (cmi_cross_ref_id),\nFOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index (master_customer_id)\n\n);",
        "Council_Tax": "CREATE TABLE Council_Tax (\ncouncil_tax_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (council_tax_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);",
        "Business_Rates": "CREATE TABLE Business_Rates (\nbusiness_rates_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (business_rates_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);",
        "Benefits_Overpayments": "CREATE TABLE Benefits_Overpayments (\ncouncil_tax_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (council_tax_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);",
        "Parking_Fines": "CREATE TABLE Parking_Fines (\ncouncil_tax_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (council_tax_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);",
        "Rent_Arrears": "CREATE TABLE Rent_Arrears (\ncouncil_tax_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (council_tax_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);",
        "Electoral_Register": "CREATE TABLE Electoral_Register (\nelectoral_register_id INTEGER NOT NULL,\ncmi_cross_ref_id INTEGER NOT NULL,\nPRIMARY KEY (electoral_register_id),\nFOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id)\n);"
    },
    "machine_repair": {
        "repair": "CREATE TABLE repair (\n\"repair_ID\" int,\n\"name\" text,\n\"Launch_Date\" text,\n\"Notes\" text,\nPRIMARY KEY (\"repair_ID\")\n);",
        "machine": "CREATE TABLE machine (\n\"Machine_ID\" int,\n\"Making_Year\" int,\n\"Class\" text,\n\"Team\" text,\n\"Machine_series\" text,\n\"value_points\" real,\n\"quality_rank\" int,\nPRIMARY KEY (\"Machine_ID\")\n);",
        "technician": "CREATE TABLE technician (\n\"technician_id\" real,\n\"Name\" text,\n\"Team\" text,\n\"Starting_Year\" real,\n\"Age\" int,\nPRIMARY Key (\"technician_id\")\n);",
        "repair_assignment": "CREATE TABLE repair_assignment (\n\"technician_id\" int,\n\"repair_ID\" int,\n\"Machine_ID\" int,\nPRIMARY Key (\"technician_id\",\"repair_ID\",\"Machine_ID\"),\nFOREIGN KEY (`technician_id`) REFERENCES `technician`(`technician_id`),\nFOREIGN KEY (`repair_ID`) REFERENCES `repair`(`repair_ID`),\nFOREIGN KEY (`Machine_ID`) REFERENCES `machine`(`Machine_ID`)\n);"
    },
    "manufactory_1": {
        "Manufacturers": "CREATE TABLE Manufacturers (\n  Code INTEGER,\n  Name VARCHAR(255) NOT NULL,\n  Headquarter VARCHAR(255) NOT NULL,\n  Founder VARCHAR(255) NOT NULL,\n  Revenue REAL,\n  PRIMARY KEY (Code)   \n);",
        "Products": "CREATE TABLE Products (\n  Code INTEGER,\n  Name VARCHAR(255) NOT NULL ,\n  Price DECIMAL NOT NULL ,\n  Manufacturer INTEGER NOT NULL,\n  PRIMARY KEY (Code), \n  FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code)\n);"
    },
    "manufacturer": {
        "manufacturer": "CREATE TABLE manufacturer (\n    \"Manufacturer_ID\" int,\n    \"Open_Year\" real,\n    \"Name\" text,\n    \"Num_of_Factories\" int,\n    \"Num_of_Shops\" int,\n    PRIMARY KEY (\"Manufacturer_ID\")\n);",
        "furniture": "CREATE TABLE furniture (\n    \"Furniture_ID\" int,\n    \"Name\" text,\n    \"Num_of_Component\" int,\n    \"Market_Rate\" real,\n    PRIMARY KEY (\"Furniture_ID\")\n);",
        "furniture_manufacte": "CREATE TABLE furniture_manufacte (\n    \"Manufacturer_ID\" int,\n    \"Furniture_ID\" int,\n    \"Price_in_Dollar\" real,\n    PRIMARY KEY (\"Manufacturer_ID\",\"Furniture_ID\"),\n    FOREIGN KEY (\"Manufacturer_ID\") REFERENCES `manufacturer`(\"Manufacturer_ID\"),\n    FOREIGN KEY (\"Furniture_ID\") REFERENCES `furniture`(\"Furniture_ID\")\n);"
    },
    "match_season": {
        "country": "CREATE TABLE country (\n    \"Country_id\" int,\n    \"Country_name\" text,\n    \"Capital\" text,\n    \"Official_native_language\" text,\n    PRIMARY KEY (\"Country_id\")\n);",
        "team": "CREATE TABLE team (\n      `Team_id` int,\n      `Name` text,\n      PRIMARY KEY (`Team_id`)\n) ;\n\nINSERT INTO `team` (`Team_id`, `Name`) VALUES (1, 'Columbus Crew');",
        "match_season": "CREATE TABLE match_season (\n    \"Season\" real,\n    \"Player\" text,\n    \"Position\" text,\n    \"Country\" int,\n    \"Team\" int,\n    \"Draft_Pick_Number\" int,\n    \"Draft_Class\" text,\n    \"College\" text,\n    PRIMARY KEY (\"Season\"),\n    FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`),\n    FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`)\n);",
        "player": "CREATE TABLE player (\n    \"Player_ID\" int,\n    \"Player\" text,\n    \"Years_Played\" text,\n    \"Total_WL\" text,\n    \"Singles_WL\" text,\n    \"Doubles_WL\" text,\n    \"Team\" int,\n    PRIMARY KEY (\"Player_ID\"),\n    FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`)\n);"
    },
    "medicine_enzyme_interaction": {
        "medicine": "CREATE TABLE medicine (\n\"id\" int,\n\"name\" text,\n\"Trade_Name\" text,\n\"FDA_approved\" text,\nprimary key (\"id\")\n);",
        "enzyme": "CREATE TABLE enzyme (\n\"id\" int,\n\"name\" text,\n\"Location\" text,\n\"Product\" text,\n\"Chromosome\" text,\n\"OMIM\" int,\n\"Porphyria\" text,\nprimary key (\"id\")\n);",
        "medicine_enzyme_interaction": "CREATE TABLE medicine_enzyme_interaction (\n\"enzyme_id\" int,\n\"medicine_id\" int,\n\"interaction_type\" text,\nprimary key (\"enzyme_id\", \"medicine_id\"),\nforeign key (\"enzyme_id\") references `enzyme`(\"id\"),\nforeign key (\"medicine_id\") references `medicine`(\"id\")\n);"
    },
    "mountain_photos": {},
    "movie_1": {
        "Movie": "CREATE TABLE Movie (\n\tmID int primary key, \n\ttitle text, \n\tyear int, \n\tdirector text\n);",
        "Reviewer": "CREATE TABLE Reviewer (\n\trID int primary key, \n\tname text);",
        "Rating": "CREATE TABLE Rating (\n\trID int, \n\tmID int, \n\tstars int, \n\tratingDate date,\n\tFOREIGN KEY (mID) references Movie(mID),\n\tFOREIGN KEY (rID) references Reviewer(rID)\n);"
    },
    "museum_visit": {
        "museum": "CREATE TABLE museum (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n);",
        "visitor": "CREATE TABLE visitor (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n);",
        "visit": "CREATE TABLE visit (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n);"
    },
    "music_1": {
        "genre": "CREATE TABLE genre (\n\tg_name varchar2(20) not null,\n\trating varchar2(10),\n\tmost_popular_in varchar2(50),\n\tprimary key(g_name)\n);",
        "artist": "CREATE TABLE artist (\n\tartist_name varchar2(50) not null,\n\tcountry varchar2(20),\n\tgender varchar2(20),\n\tpreferred_genre varchar2(50),\n\tconstraint a_name primary key(artist_name),\n\tforeign key(preferred_genre) references genre(g_name) ON DELETE CASCADE\n);",
        "files": "CREATE TABLE files (\n\tf_id number(10) not null,\n\tartist_name varchar2(50),\n\tfile_size varchar2(20),\n\tduration varchar2(20),\n\tformats varchar2(20),\n\tprimary key(f_id),\n\tforeign key(artist_name) references artist(artist_name) ON DELETE CASCADE\n);",
        "song": "CREATE TABLE song (\n\tsong_name varchar2(50),\n\tartist_name varchar2(50),\n\tcountry varchar2(20),\n\tf_id number(10),\n    \tgenre_is varchar2(20),\n\trating number(10) check(rating>0 and rating<11),\n\tlanguages varchar2(20),\n\treleasedate Date, \n\tresolution number(10) not null,\n\tconstraint s_name primary key(song_name),\n\tforeign key(artist_name) references artist(artist_name) ON DELETE CASCADE,\n\tforeign key(f_id) references files(f_id) ON DELETE CASCADE,\n\tforeign key(genre_is) references genre(g_name) ON DELETE CASCADE\n);"
    },
    "music_2": {
        "Songs": "CREATE TABLE Songs ( \n\t\"SongId\" INTEGER PRIMARY KEY, \n\t\"Title\" TEXT \n);",
        "Albums": "CREATE TABLE Albums ( \n\t\"AId\" INTEGER PRIMARY KEY, \n\t\"Title\" TEXT, \n\t\"Year\" INTEGER, \n\t\"Label\" TEXT, \n\t\"Type\" TEXT );",
        "Band": "CREATE TABLE Band ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Firstname\" TEXT, \n\t\"Lastname\" TEXT );",
        "Instruments": "CREATE TABLE Instruments ( \n\t\"SongId\" INTEGER, \n\t\"BandmateId\" INTEGER, \n\t\"Instrument\" TEXT ,\n\tPRIMARY KEY(SongId, BandmateId, Instrument),\n\tFOREIGN KEY (SongId) REFERENCES Songs(SongId),\n\tFOREIGN KEY (BandmateId) REFERENCES Band(Id)\n);",
        "Performance": "CREATE TABLE Performance ( \n\t\"SongId\" INTEGER, \n\t\"Bandmate\" INTEGER, \n\t\"StagePosition\" TEXT,\n\tPRIMARY KEY(SongId, Bandmate),\n\tFOREIGN KEY (SongId) REFERENCES Songs(SongId),\n\tFOREIGN KEY (Bandmate) REFERENCES Band(Id)\n);",
        "Tracklists": "CREATE TABLE Tracklists ( \n\t\"AlbumId\" INTEGER, \n\t\"Position\" INTEGER, \n\t\"SongId\" INTEGER ,\n\tPRIMARY KEY(AlbumId, Position),\n\tFOREIGN KEY (SongId) REFERENCES Songs(SongId),\n\tFOREIGN KEY (AlbumId) REFERENCES Albums(AId)\n);",
        "Vocals": "CREATE TABLE Vocals ( \n\t\"SongId\" INTEGER, \n\t\"Bandmate\" INTEGER, \n\t\"Type\" TEXT,\n\tPRIMARY KEY(SongId, Bandmate),\n\tFOREIGN KEY (SongId) REFERENCES Songs(SongId),\n\tFOREIGN KEY (Bandmate) REFERENCES Band(Id)\n);"
    },
    "music_4": {
        "artist": "CREATE TABLE artist (\n    \"Artist_ID\" int,\n    \"Artist\" text,\n    \"Age\" int,\n    \"Famous_Title\" text,\n    \"Famous_Release_date\" text,\n    PRIMARY KEY (\"Artist_ID\")\n);",
        "volume": "CREATE TABLE volume (\n    \"Volume_ID\" int,\n    \"Volume_Issue\" text,\n    \"Issue_Date\" text,\n    \"Weeks_on_Top\" real,\n    \"Song\" text,\n    \"Artist_ID\" int,\n    PRIMARY KEY (\"Volume_ID\"),\n    FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`)\n);",
        "music_festival": "CREATE TABLE music_festival (\n    \"ID\" int,\n    \"Music_Festival\" text,\n    \"Date_of_ceremony\" text,\n    \"Category\" text,\n    \"Volume\" int,\n    \"Result\" text,\n    PRIMARY KEY (`ID`),\n    FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`)\n);"
    },
    "musical": {
        "musical": "CREATE TABLE musical (\n\"Musical_ID\" int,\n\"Name\" text,\n\"Year\" int,\n\"Award\" text,\n\"Category\" text,\n\"Nominee\" text,\n\"Result\" text,\nPRIMARY KEY (\"Musical_ID\")\n);",
        "actor": "CREATE TABLE actor (\n\"Actor_ID\" int,\n\"Name\" text,\n\"Musical_ID\" int,\n\"Character\" text,\n\"Duration\" text,\n\"age\" int,\nPRIMARY KEY (\"Actor_ID\"),\nFOREIGN KEY (\"Musical_ID\") REFERENCES \"actor\"(\"Actor_ID\")\n);"
    },
    "network_1": {
        "Highschooler": "CREATE TABLE Highschooler (\n\tID int primary key, \n\tname text, \n\tgrade int);",
        "Friend": "CREATE TABLE Friend (\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n);",
        "Likes": "CREATE TABLE Likes (\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n);"
    },
    "network_2": {
        "Person": "CREATE TABLE Person (\n  name varchar(20) PRIMARY KEY,\n  age INTEGER,\n  city TEXT,\n  gender TEXT,\n  job TEXT\n);",
        "PersonFriend": "CREATE TABLE PersonFriend (\n  name varchar(20),\n  friend varchar(20),\n  year INTEGER,\n  FOREIGN KEY (name) REFERENCES Person(name),\n  FOREIGN KEY (friend) REFERENCES Person(name)\n);"
    },
    "news_report": {
        "event": "CREATE TABLE event (\n    \"Event_ID\" int,\n    \"Date\" text,\n    \"Venue\" text,\n    \"Name\" text,\n    \"Event_Attendance\" int,\n    PRIMARY KEY (\"Event_ID\")\n);",
        "journalist": "CREATE TABLE journalist (\n    \"journalist_ID\" int,\n    \"Name\" text,\n    \"Nationality\" text,\n    \"Age\" text,\n    \"Years_working\" int,\n    PRIMARY KEY (\"journalist_ID\")\n);",
        "news_report": "CREATE TABLE news_report (\n    \"journalist_ID\" int,\n    \"Event_ID\" int,\n    \"Work_Type\" text,\n    PRIMARY KEY (\"journalist_ID\",\"Event_ID\"),\n    FOREIGN KEY (\"journalist_ID\") REFERENCES `journalist`(\"journalist_ID\"),\n    FOREIGN KEY (\"Event_ID\") REFERENCES `event`(\"Event_ID\")\n);"
    },
    "orchestra": {
        "conductor": "CREATE TABLE conductor (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n);",
        "orchestra": "CREATE TABLE orchestra (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n);",
        "performance": "CREATE TABLE performance (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n);",
        "show": "CREATE TABLE show (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n);"
    },
    "party_host": {
        "party": "CREATE TABLE party (\n\"Party_ID\" int,\n\"Party_Theme\" text,\n\"Location\" text,\n\"First_year\" text,\n\"Last_year\" text,\n\"Number_of_hosts\" int,\nPRIMARY KEY (\"Party_ID\")\n);",
        "host": "CREATE TABLE host (\n\"Host_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" text,\nPRIMARY KEY (\"Host_ID\")\n);",
        "party_host": "CREATE TABLE party_host (\n\"Party_ID\" int,\n\"Host_ID\" int,\n\"Is_Main_in_Charge\" bool,\nPRIMARY KEY (\"Party_ID\",\"Host_ID\"),\nFOREIGN KEY (\"Host_ID\") REFERENCES `host`(\"Host_ID\"),\nFOREIGN KEY (\"Party_ID\") REFERENCES `party`(\"Party_ID\")\n);"
    },
    "party_people": {
        "region": "CREATE TABLE region (\n\"Region_ID\" int,\n\"Region_name\" text,\n\"Date\" text,\n\"Label\" text,\n\"Format\" text,\n\"Catalogue\" text,\nPRIMARY KEY (\"Region_ID\")\n);",
        "party": "CREATE TABLE party (\n\"Party_ID\" int,\n\"Minister\" text,\n\"Took_office\" text,\n\"Left_office\" text,\n\"Region_ID\" int,\n\"Party_name\" text,\nPRIMARY KEY (\"Party_ID\"),\nFOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`)\n);",
        "member": "CREATE TABLE member (\n\"Member_ID\" int,\n\"Member_Name\" text,\n\"Party_ID\" text,\n\"In_office\" text,\nPRIMARY KEY (\"Member_ID\"),\nFOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`)\n);",
        "party_events": "CREATE TABLE party_events (\n\"Event_ID\" int,\n\"Event_Name\" text,\n\"Party_ID\" int,\n\"Member_in_charge_ID\" int,\nPRIMARY KEY (\"Event_ID\"),\nFOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`),\nFOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`)\n);"
    },
    "performance_attendance": {
        "member": "CREATE TABLE member (\n    \"Member_ID\" text,\n    \"Name\" text,\n    \"Nationality\" text,\n    \"Role\" text,\n    PRIMARY KEY (\"Member_ID\")\n);",
        "performance": "CREATE TABLE performance (\n    \"Performance_ID\" real,\n    \"Date\" text,\n    \"Host\" text,\n    \"Location\" text,\n    \"Attendance\" int,\n    PRIMARY KEY (\"Performance_ID\")\n);",
        "member_attendance": "CREATE TABLE member_attendance (\n    \"Member_ID\" int,\n    \"Performance_ID\" int,\n    \"Num_of_Pieces\" int,\n    PRIMARY KEY (\"Member_ID\",\"Performance_ID\"),\n    FOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\"),\n    FOREIGN KEY (\"Performance_ID\") REFERENCES `performance`(\"Performance_ID\")\n);"
    },
    "perpetrator": {
        "perpetrator": "CREATE TABLE perpetrator (\n\"Perpetrator_ID\" int,\n\"People_ID\" int,\n\"Date\" text,\n\"Year\" real,\n\"Location\" text,\n\"Country\" text,\n\"Killed\" int,\n\"Injured\" int,\nPRIMARY KEY (\"Perpetrator_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES \"people\"(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Name\" text,\n\"Height\" real,\n\"Weight\" real,\n\"Home Town\" text,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "pets_1": {
        "Student": "CREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n);",
        "Has_Pet": "CREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n);",
        "Pets": "CREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n);"
    },
    "phone_1": {},
    "phone_market": {
        "phone": "CREATE TABLE phone (\n\"Name\" text,\n\"Phone_ID\" int,\n\"Memory_in_G\" int,\n\"Carrier\" text,\n\"Price\" real,\nPRIMARY KEY (\"Phone_ID\")\n);",
        "market": "CREATE TABLE market (\n\"Market_ID\" int,\n\"District\" text,\n\"Num_of_employees\" int,\n\"Num_of_shops\" real,\n\"Ranking\" int,\nPRIMARY KEY (\"Market_ID\")\n);",
        "phone_market": "CREATE TABLE phone_market (\n\"Market_ID\" int,\n\"Phone_ID\" text,\n\"Num_of_stock\" int,\nPRIMARY KEY (\"Market_ID\",\"Phone_ID\"),\nFOREIGN KEY (\"Market_ID\") REFERENCES `market`(\"Market_ID\"),\nFOREIGN KEY (\"Phone_ID\") REFERENCES `phone`(\"Phone_ID\")\n);"
    },
    "pilot_record": {
        "aircraft": "CREATE TABLE aircraft (\n\"Aircraft_ID\" int,\n\"Order_Year\" int,\n\"Manufacturer\" text,\n\"Model\" text,\n\"Fleet_Series\" text,\n\"Powertrain\" text,\n\"Fuel_Propulsion\" text,\nPRIMARY KEY (\"Aircraft_ID\")\n);",
        "pilot": "CREATE TABLE pilot (\n\"Pilot_ID\" int,\n\"Pilot_name\" text,\n\"Rank\" int,\n\"Age\" int,\n\"Nationality\" text,\n\"Position\" text,\n\"Join_Year\" int,\n\"Team\" text,\nPRIMARY KEY (\"Pilot_ID\")\n);",
        "pilot_record": "CREATE TABLE pilot_record (\n\"Record_ID\" int,\n\"Pilot_ID\" int,\n\"Aircraft_ID\" int,\n\"Date\" text,\nPRIMARY KEY (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"),\nFOREIGN KEY (`Pilot_ID`) REFERENCES `pilot`(`Pilot_ID`),\nFOREIGN KEY (`Aircraft_ID`) REFERENCES `aircraft`(`Aircraft_ID`)\n);"
    },
    "poker_player": {
        "poker_player": "CREATE TABLE poker_player (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n);",
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n);"
    },
    "product_catalog": {
        "Attribute_Definitions": "CREATE TABLE Attribute_Definitions (\n`attribute_id` INTEGER PRIMARY KEY,\n`attribute_name` VARCHAR(30),\n`attribute_data_type` VARCHAR(10)\n);",
        "Catalogs": "CREATE TABLE Catalogs (\n`catalog_id` INTEGER PRIMARY KEY,\n`catalog_name` VARCHAR(50),\n`catalog_publisher` VARCHAR(80),\n`date_of_publication` DATETIME,\n`date_of_latest_revision` DATETIME\n);",
        "Catalog_Structure": "CREATE TABLE Catalog_Structure (\n`catalog_level_number` INTEGER PRIMARY KEY,\n`catalog_id` INTEGER NOT NULL,\n`catalog_level_name` VARCHAR(50),\nFOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` )\n);",
        "Catalog_Contents": "CREATE TABLE Catalog_Contents (\n`catalog_entry_id` INTEGER PRIMARY KEY,\n`catalog_level_number` INTEGER NOT NULL,\n`parent_entry_id` INTEGER,\n`previous_entry_id` INTEGER,\n`next_entry_id` INTEGER,\n`catalog_entry_name` VARCHAR(80),\n`product_stock_number` VARCHAR(50),\n`price_in_dollars` DOUBLE NULL,\n`price_in_euros` DOUBLE NULL,\n`price_in_pounds` DOUBLE NULL,\n`capacity` VARCHAR(20),\n`length` VARCHAR(20),\n`height` VARCHAR(20),\n`width` VARCHAR(20),\nFOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` )\n);",
        "Catalog_Contents_Additional_Attributes": "CREATE TABLE Catalog_Contents_Additional_Attributes (\n`catalog_entry_id` INTEGER NOT NULL,\n`catalog_level_number` INTEGER NOT NULL,\n`attribute_id` INTEGER NOT NULL,\n`attribute_value` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ),\nFOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` )\n);"
    },
    "products_for_hire": {
        "Discount_Coupons": "CREATE TABLE Discount_Coupons (\n`coupon_id` INTEGER PRIMARY KEY,\n`date_issued` DATETIME,\n`coupon_amount` DECIMAL(19,4)\n);",
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`coupon_id` INTEGER NOT NULL,\n`good_or_bad_customer` VARCHAR(4),\n`first_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`gender_mf` VARCHAR(1),\n`date_became_customer` DATETIME,\n`date_last_hire` DATETIME,\nFOREIGN KEY (`coupon_id` ) REFERENCES `Discount_Coupons`(`coupon_id` )\n);",
        "Bookings": "CREATE TABLE Bookings (\n`booking_id` INTEGER PRIMARY KEY ,\n`customer_id` INTEGER NOT NULL,\n`booking_status_code` VARCHAR(10) NOT NULL,\n`returned_damaged_yn` VARCHAR(40),\n`booking_start_date` DATETIME,\n`booking_end_date` DATETIME,\n`count_hired` VARCHAR(40),\n`amount_payable` DECIMAL(19,4),\n`amount_of_discount` DECIMAL(19,4),\n`amount_outstanding` DECIMAL(19,4),\n`amount_of_refund` DECIMAL(19,4),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Products_for_Hire": "CREATE TABLE Products_for_Hire (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15) NOT NULL,\n`daily_hire_cost` DECIMAL(19,4),\n`product_name` VARCHAR(80),\n`product_description` VARCHAR(255)\n);",
        "Payments": "CREATE TABLE Payments (\n`payment_id` INTEGER PRIMARY KEY,\n`booking_id` INTEGER,\n`customer_id` INTEGER NOT NULL,\n`payment_type_code` VARCHAR(15) NOT NULL,\n`amount_paid_in_full_yn` VARCHAR(1),\n`payment_date` DATETIME,\n`amount_due` DECIMAL(19,4),\n`amount_paid` DECIMAL(19,4),\nFOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Products_Booked": "CREATE TABLE Products_Booked (\n`booking_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`returned_yn` VARCHAR(1),\n`returned_late_yn` VARCHAR(1),\n`booked_count` INTEGER,\n`booked_amount` FLOAT NULL,\nPRIMARY KEY (`booking_id`, `product_id`)\nFOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products_for_Hire`(`product_id` )\n);",
        "View_Product_Availability": "CREATE TABLE View_Product_Availability (\n`product_id` INTEGER NOT NULL,\n`booking_id` INTEGER NOT NULL,\n`status_date` DATETIME PRIMARY KEY,\n`available_yn` VARCHAR(1),\nFOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products_for_Hire`(`product_id` )\n);"
    },
    "products_gen_characteristics": {
        "Ref_Characteristic_Types": "CREATE TABLE Ref_Characteristic_Types (\n`characteristic_type_code` VARCHAR(15) PRIMARY KEY,\n`characteristic_type_description` VARCHAR(80)\n);",
        "Ref_Colors": "CREATE TABLE Ref_Colors (\n`color_code` VARCHAR(15) PRIMARY KEY,\n`color_description` VARCHAR(80)\n);",
        "Ref_Product_Categories": "CREATE TABLE Ref_Product_Categories (\n`product_category_code` VARCHAR(15) PRIMARY KEY,\n`product_category_description` VARCHAR(80),\n`unit_of_measure` VARCHAR(20)\n);",
        "Characteristics": "CREATE TABLE Characteristics (\n`characteristic_id` INTEGER PRIMARY KEY,\n`characteristic_type_code` VARCHAR(15) NOT NULL,\n`characteristic_data_type` VARCHAR(10),\n`characteristic_name` VARCHAR(80),\n`other_characteristic_details` VARCHAR(255),\nFOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` )\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`color_code` VARCHAR(15) NOT NULL,\n`product_category_code` VARCHAR(15) NOT NULL,\n`product_name` VARCHAR(80),\n`typical_buying_price` VARCHAR(20),\n`typical_selling_price` VARCHAR(20),\n`product_description` VARCHAR(255),\n`other_product_details` VARCHAR(255),\nFOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` )\n);",
        "Product_Characteristics": "CREATE TABLE Product_Characteristics (\n`product_id` INTEGER NOT NULL,\n`characteristic_id` INTEGER NOT NULL,\n`product_characteristic_value` VARCHAR(50),\nFOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);"
    },
    "program_share": {
        "program": "CREATE TABLE program (\n\"Program_ID\" int,\n\"Name\" text,\n\"Origin\" text,\n\"Launch\" real,\n\"Owner\" text,\nPRIMARY KEY (\"Program_ID\")\n);",
        "channel": "CREATE TABLE channel (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Owner\" text,\n\"Share_in_percent\" real,\n\"Rating_in_percent\" real,\nPRIMARY KEY (\"Channel_ID\")\n);",
        "broadcast": "CREATE TABLE broadcast (\n\"Channel_ID\" int,\n\"Program_ID\" int,\n\"Time_of_day\" text,\nPRIMARY KEY (\"Channel_ID\",\"Program_ID\"),\nFOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`),\nFOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`)\n);",
        "broadcast_share": "CREATE TABLE broadcast_share (\n\"Channel_ID\" int,\n\"Program_ID\" int,\n\"Date\" text,\n\"Share_in_percent\" real,\nPRIMARY KEY (\"Channel_ID\",\"Program_ID\"),\nFOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`),\nFOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`)\n);"
    },
    "protein_institute": {
        "building": "CREATE TABLE building (\n\"building_id\" text,\n\"Name\" text,\n\"Street_address\" text,\n\"Years_as_tallest\" text,\n\"Height_feet\" int,\n\"Floors\" int,\nPRIMARY KEY(\"building_id\")\n);",
        "Institution": "CREATE TABLE Institution (\n\"Institution_id\"  text,\n\"Institution\" text,\n\"Location\" text,\n\"Founded\" real,\n\"Type\" text,\n\"Enrollment\" int,\n\"Team\" text,\n\"Primary_Conference\" text,\n\"building_id\" text,\nPRIMARY KEY(\"Institution_id\"),\nFOREIGN  KEY (\"building_id\") REFERENCES \"building\"(\"building_id\")\n);",
        "protein": "CREATE TABLE protein (\n\"common_name\" text,\n\"protein_name\" text,\n\"divergence_from_human_lineage\" real,\n\"accession_number\" text,\n\"sequence_length\" real,\n\"sequence_identity_to_human_protein\" text,\n\"Institution_id\" text,\nPRIMARY KEY(\"common_name\"),\nFOREIGN KEY(\"Institution_id\") REFERENCES \"Institution\"(\"Institution_id\")\n);"
    },
    "race_track": {
        "race": "CREATE TABLE race (\n\"Race_ID\" int,\n\"Name\" text,\n\"Class\" text,\n\"Date\" text,\n\"Track_ID\" text,\nPRIMARY KEY (\"Race_ID\"),\nFOREIGN KEY (\"Track_ID\") REFERENCES \"track\"(\"Track_ID\")\n);",
        "track": "CREATE TABLE track (\n\"Track_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"Seating\" real,\n\"Year_Opened\" real,\nPRIMARY KEY (\"Track_ID\")\n);"
    },
    "railway": {
        "railway": "CREATE TABLE railway (\n\"Railway_ID\" int,\n\"Railway\" text,\n\"Builder\" text,\n\"Built\" text,\n\"Wheels\" text,\n\"Location\" text,\n\"ObjectNumber\" text,\nPRIMARY KEY (\"Railway_ID\")\n);",
        "train": "CREATE TABLE train (\n\"Train_ID\" int,\n\"Train_Num\" text,\n\"Name\" text,\n\"From\" text,\n\"Arrival\" text,\n\"Railway_ID\" int,\nPRIMARY KEY (\"Train_ID\"),\nFOREIGN KEY (\"Railway_ID\") REFERENCES `railway`(\"Railway_ID\")\n);",
        "manager": "CREATE TABLE manager (\n\"Manager_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Working_year_starts\" text,\n\"Age\" int,\n\"Level\" int,\nPRIMARY KEY (\"Manager_ID\")\n);",
        "railway_manage": "CREATE TABLE railway_manage (\n\"Railway_ID\" int,\n\"Manager_ID\" int,\n\"From_Year\" text,\nPRIMARY KEY (\"Railway_ID\",\"Manager_ID\"),\nFOREIGN KEY (\"Manager_ID\") REFERENCES \"manager\"(\"Manager_ID\"),\nFOREIGN KEY (\"Railway_ID\") REFERENCES \"railway\"(\"Railway_ID\")\n);"
    },
    "real_estate_properties": {
        "Ref_Feature_Types": "CREATE TABLE Ref_Feature_Types (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n);",
        "Ref_Property_Types": "CREATE TABLE Ref_Property_Types (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n);",
        "Other_Available_Features": "CREATE TABLE Other_Available_Features (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n);",
        "Properties": "CREATE TABLE Properties (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n);",
        "Other_Property_Features": "CREATE TABLE Other_Property_Features (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n);"
    },
    "restaurant_1": {
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Restaurant": "CREATE TABLE Restaurant (\n       ResID       INTEGER PRIMARY KEY,\n       ResName     VARCHAR(100),\n       Address     VARCHAR(100),\n       Rating INTEGER\n);",
        "Type_Of_Restaurant": "CREATE TABLE Type_Of_Restaurant (\n       ResID       INTEGER,\n       ResTypeID   INTEGER,\n       FOREIGN KEY(ResID) REFERENCES Restaurant(ResID),\n       FOREIGN KEY(ResTypeID) REFERENCES Restaurant_Type(ResTypeID)\n);",
        "Restaurant_Type": "CREATE TABLE Restaurant_Type (\n       ResTypeID            INTEGER PRIMARY KEY,\n       ResTypeName          VARCHAR(40),\n       ResTypeDescription   VARCHAR(100)\n);",
        "Visits_Restaurant": "CREATE TABLE Visits_Restaurant (\n       StuID      INTEGER,\n       ResID      INTEGER,\n       Time       TIMESTAMP,\n       Spent      FLOAT,\n       FOREIGN KEY(StuID) REFERENCES Student(StuID),\n       FOREIGN KEY(ResID) REFERENCES Restaurant(ResID)\n);"
    },
    "restaurants": {
        "GEOGRAPHIC": "CREATE TABLE GEOGRAPHIC (\n\"CITY_NAME\" text,\n\"COUNTY\" text,\n\"REGION\" text,\nprimary key(\"CITY_NAME\")\n);",
        "RESTAURANT": "CREATE TABLE RESTAURANT (\n\"ID\" int,\n\"NAME\" text,\n\"FOOD_TYPE\" text,\n\"CITY_NAME\" text,\n\"RATING\" real,\nprimary key(\"ID\"),\nforeign key (\"CITY_NAME\") references `GEOGRAPHIC`(\"CITY_NAME\")\n);",
        "LOCATION": "CREATE TABLE LOCATION (\n\"RESTAURANT_ID\" int,\n\"HOUSE_NUMBER\" int,\n\"STREET_NAME\" text,\n\"CITY_NAME\" text,\nprimary key(\"RESTAURANT_ID\"),\nforeign key (\"CITY_NAME\") references `GEOGRAPHIC`(\"CITY_NAME\")\nforeign key (\"RESTAURANT_ID\") references `RESTAURANT`(\"RESTAURANT_ID\")\n);"
    },
    "riding_club": {},
    "roller_coaster": {
        "roller_coaster": "CREATE TABLE roller_coaster (\n\"Roller_Coaster_ID\" int,\n\"Name\" text,\n\"Park\" text,\n\"Country_ID\" int,\n\"Length\" real,\n\"Height\" real,\n\"Speed\" text,\n\"Opened\" text,\n\"Status\" text,\nPRIMARY KEY (\"Roller_Coaster_ID\"),\nFOREIGN KEY (\"Country_ID\") REFERENCES `country`(\"Country_ID\")\n);",
        "country": "CREATE TABLE country (\n\"Country_ID\" int,\n\"Name\" text,\n\"Population\" int,\n\"Area\" int,\n\"Languages\" text,\nPRIMARY KEY (\"Country_ID\")\n);"
    },
    "sakila_1": {
        "actor": "CREATE TABLE actor (\n  actor_id SMALLINT UNSIGNED NOT NULL,\n  first_name VARCHAR(45) NOT NULL,\n  last_name VARCHAR(45) NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (actor_id)\n);",
        "address": "CREATE TABLE address (\n  address_id SMALLINT UNSIGNED NOT NULL,\n  address VARCHAR(50) NOT NULL,\n  address2 VARCHAR(50) DEFAULT NULL,\n  district VARCHAR(20) NOT NULL,\n  city_id SMALLINT UNSIGNED NOT NULL,\n  postal_code VARCHAR(10) DEFAULT NULL,\n  phone VARCHAR(20) NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (address_id),\n  FOREIGN KEY (city_id) REFERENCES city (city_id)\n);",
        "category": "CREATE TABLE category (\n  category_id TINYINT UNSIGNED NOT NULL,\n  name VARCHAR(25) NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (category_id)\n);",
        "city": "CREATE TABLE city (\n  city_id SMALLINT UNSIGNED NOT NULL,\n  city VARCHAR(50) NOT NULL,\n  country_id SMALLINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (city_id),\n  FOREIGN KEY (country_id) REFERENCES country (country_id)\n);",
        "country": "CREATE TABLE country (\n  country_id SMALLINT UNSIGNED NOT NULL,\n  country VARCHAR(50) NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (country_id)\n);",
        "customer": "CREATE TABLE customer (\n  customer_id SMALLINT UNSIGNED NOT NULL,\n  store_id TINYINT UNSIGNED NOT NULL,\n  first_name VARCHAR(45) NOT NULL,\n  last_name VARCHAR(45) NOT NULL,\n  email VARCHAR(50) DEFAULT NULL,\n  address_id SMALLINT UNSIGNED NOT NULL,\n  active BOOLEAN NOT NULL DEFAULT TRUE,\n  create_date DATETIME NOT NULL,\n  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (customer_id),\n  FOREIGN KEY (address_id) REFERENCES address (address_id),\n  FOREIGN KEY (store_id) REFERENCES store (store_id)\n);",
        "film": "CREATE TABLE film (\n  film_id SMALLINT UNSIGNED NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  description TEXT DEFAULT NULL,\n  release_year YEAR DEFAULT NULL,\n  language_id TINYINT UNSIGNED NOT NULL,\n  original_language_id TINYINT UNSIGNED DEFAULT NULL,\n  rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,\n  rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,\n  length SMALLINT UNSIGNED DEFAULT NULL,\n  replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,\n  rating DEFAULT 'G',\n  special_features DEFAULT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (film_id),\n  FOREIGN KEY (language_id) REFERENCES language (language_id),\n  FOREIGN KEY (original_language_id) REFERENCES language (language_id)\n);",
        "film_actor": "CREATE TABLE film_actor (\n  actor_id SMALLINT UNSIGNED NOT NULL,\n  film_id SMALLINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (actor_id,film_id),\n FOREIGN KEY (actor_id) REFERENCES actor (actor_id),\n  FOREIGN KEY (film_id) REFERENCES film (film_id)\n);",
        "film_category": "CREATE TABLE film_category (\n  film_id SMALLINT UNSIGNED NOT NULL,\n  category_id TINYINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (film_id, category_id),\n  FOREIGN KEY (film_id) REFERENCES film (film_id),\n  FOREIGN KEY (category_id) REFERENCES category (category_id)\n);",
        "film_text": "CREATE TABLE film_text (\n  film_id SMALLINT NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  PRIMARY KEY  (film_id)\n);",
        "inventory": "CREATE TABLE inventory (\n  inventory_id MEDIUMINT UNSIGNED NOT NULL,\n  film_id SMALLINT UNSIGNED NOT NULL,\n  store_id TINYINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (inventory_id),\n  FOREIGN KEY (store_id) REFERENCES store (store_id),\n  FOREIGN KEY (film_id) REFERENCES film (film_id)\n);",
        "language": "CREATE TABLE language (\n  language_id TINYINT UNSIGNED NOT NULL,\n  name CHAR(20) NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (language_id)\n);",
        "payment": "CREATE TABLE payment (\n  payment_id SMALLINT UNSIGNED NOT NULL,\n  customer_id SMALLINT UNSIGNED NOT NULL,\n  staff_id TINYINT UNSIGNED NOT NULL,\n  rental_id INT DEFAULT NULL,\n  amount DECIMAL(5,2) NOT NULL,\n  payment_date DATETIME NOT NULL,\n  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (payment_id),\n  FOREIGN KEY (rental_id) REFERENCES rental (rental_id),\n  FOREIGN KEY (customer_id) REFERENCES customer (customer_id),\n  FOREIGN KEY (staff_id) REFERENCES staff (staff_id)\n);",
        "rental": "CREATE TABLE rental (\n  rental_id INT NOT NULL,\n  rental_date DATETIME NOT NULL,\n  inventory_id MEDIUMINT UNSIGNED NOT NULL,\n  customer_id SMALLINT UNSIGNED NOT NULL,\n  return_date DATETIME DEFAULT NULL,\n  staff_id TINYINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (rental_id),\n  FOREIGN KEY (staff_id) REFERENCES staff (staff_id),\n  FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),\n  FOREIGN KEY (customer_id) REFERENCES customer (customer_id)\n);",
        "staff": "CREATE TABLE staff (\n  staff_id TINYINT UNSIGNED NOT NULL,\n  first_name VARCHAR(45) NOT NULL,\n  last_name VARCHAR(45) NOT NULL,\n  address_id SMALLINT UNSIGNED NOT NULL,\n  picture BLOB DEFAULT NULL,\n  email VARCHAR(50) DEFAULT NULL,\n  store_id TINYINT UNSIGNED NOT NULL,\n  active BOOLEAN NOT NULL DEFAULT TRUE,\n  username VARCHAR(16) NOT NULL,\n  password VARCHAR(40) DEFAULT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (staff_id),\n  --FOREIGN KEY (store_id) REFERENCES store (store_id),\n  FOREIGN KEY (address_id) REFERENCES address (address_id)\n);",
        "store": "CREATE TABLE store (\n  store_id TINYINT UNSIGNED NOT NULL,\n  manager_staff_id TINYINT UNSIGNED NOT NULL,\n  address_id SMALLINT UNSIGNED NOT NULL,\n  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY  (store_id),\n  FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id),\n  FOREIGN KEY (address_id) REFERENCES address (address_id)\n);"
    },
    "scholar": {
        "venue": "CREATE TABLE venue (\n  `venueId` integer NOT NULL\n,  `venueName` varchar(100) DEFAULT NULL\n,  PRIMARY KEY (`venueId`)\n);",
        "author": "CREATE TABLE author (\n  `authorId` integer NOT NULL\n,  `authorName` varchar(50) DEFAULT NULL\n,  PRIMARY KEY (`authorId`)\n);",
        "dataset": "CREATE TABLE dataset (\n  `datasetId` integer NOT NULL\n,  `datasetName` varchar(50) DEFAULT NULL\n,  PRIMARY KEY (`datasetId`)\n);",
        "journal": "CREATE TABLE journal (\n  `journalId` integer NOT NULL\n,  `journalName` varchar(100) DEFAULT NULL\n,  PRIMARY KEY (`journalId`)\n);",
        "keyphrase": "CREATE TABLE keyphrase (\n  `keyphraseId` integer NOT NULL\n,  `keyphraseName` varchar(50) DEFAULT NULL\n,  PRIMARY KEY (`keyphraseId`)\n);",
        "paper": "CREATE TABLE paper (\n  `paperId` integer NOT NULL\n,  `title` varchar(300) DEFAULT NULL\n,  `venueId` integer DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  `numCiting` integer DEFAULT NULL\n,  `numCitedBy` integer DEFAULT NULL\n,  `journalId` integer DEFAULT NULL\n,  PRIMARY KEY (`paperId`)\n,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`)\n,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`)\n);",
        "cite": "CREATE TABLE cite (\n  `citingPaperId` integer NOT NULL\n,  `citedPaperId` integer NOT NULL\n,  PRIMARY KEY (`citingPaperId`,`citedPaperId`)\n,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`)\n,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`)\n);",
        "paperDataset": "CREATE TABLE paperDataset (\n  `paperId` integer DEFAULT NULL\n,  `datasetId` integer DEFAULT NULL\n,  PRIMARY KEY (`datasetId`, `paperId`)\n);",
        "paperKeyphrase": "CREATE TABLE paperKeyphrase (\n  `paperId` integer DEFAULT NULL\n,  `keyphraseId` integer DEFAULT NULL\n,  PRIMARY KEY (`keyphraseId`,`paperId`)\n,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`)\n,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`)\n);",
        "writes": "CREATE TABLE writes (\n  `paperId` integer DEFAULT NULL\n,  `authorId` integer DEFAULT NULL\n,  PRIMARY KEY (`paperId`,`authorId`)\n,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`)\n,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`)\n);"
    },
    "school_bus": {
        "driver": "CREATE TABLE driver (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Party\" text,\n\"Home_city\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n);",
        "school": "CREATE TABLE school (\n\"School_ID\" int,\n\"Grade\" text,\n\"School\" text,\n\"Location\" text,\n\"Type\" text,\nPRIMARY KEY (\"School_ID\")\n);",
        "school_bus": "CREATE TABLE school_bus (\n\"School_ID\" int,\n\"Driver_ID\" int,\n\"Years_Working\" int,\n\"If_full_time\" bool,\nPRIMARY KEY (\"School_ID\",\"Driver_ID\"),\nFOREIGN KEY (\"School_ID\") REFERENCES `school`(\"School_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES `driver`(\"Driver_ID\")\n);"
    },
    "school_finance": {
        "School": "CREATE TABLE School (\n\"School_id\" text,\n\"School_name\" text,\n\"Location\" text,\n\"Mascot\" text,\n\"Enrollment\" int,\n\"IHSAA_Class\" text,\n\"IHSAA_Football_Class\" text,\n\"County\" text,\nPRIMARY KEY (\"School_id\")\n);",
        "budget": "CREATE TABLE budget (\n\"School_id\" int,\n\"Year\" int,\n\"Budgeted\" int,\n\"total_budget_percent_budgeted\" real,\n\"Invested\" int,\n\"total_budget_percent_invested\" real,\n\"Budget_invested_percent\" text,\nPRIMARY KEY(\"School_id\",\"YEAR\"),\nFOREIGN KEY(\"School_id\") REFERENCES \"School\"(\"School_id\")\n\n);",
        "endowment": "CREATE TABLE endowment (\n\"endowment_id\" int,\n\"School_id\" int,\n\"donator_name\" text,\n\"amount\" real,\nPRIMARY KEY(\"endowment_id\"),\nFOREIGN KEY(\"School_id\") REFERENCES \"School\"(\"School_id\")\n);"
    },
    "school_player": {
        "school": "CREATE TABLE school (\n\"School_ID\" int,\n\"School\" text,\n\"Location\" text,\n\"Enrollment\" real,\n\"Founded\" real,\n\"Denomination\" text,\n\"Boys_or_Girls\" text,\n\"Day_or_Boarding\" text,\n\"Year_Entered_Competition\" real,\n\"School_Colors\" text,\nPRIMARY KEY (\"School_Id\")\n);",
        "school_details": "CREATE TABLE school_details (\n\"School_ID\" int,\n\"Nickname\" text,\n\"Colors\" text,\n\"League\" text,\n\"Class\" text,\n\"Division\" text,\nPRIMARY KEY (\"School_Id\"),\nFOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`)\n);",
        "school_performance": "CREATE TABLE school_performance (\n\"School_Id\" int,\n\"School_Year\" text,\n\"Class_A\" text,\n\"Class_AA\" text,\nPRIMARY KEY (\"School_Id\",\"School_Year\"),\nFOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`)\n);",
        "player": "CREATE TABLE player (\n\"Player_ID\" int,\n\"Player\" text,\n\"Team\" text,\n\"Age\" int,\n\"Position\" text,\n\"School_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`)\n);"
    },
    "scientist_1": {
        "Scientists": "CREATE TABLE Scientists (\n  SSN int,\n  Name Char(30) not null,\n  Primary Key (SSN)\n);",
        "Projects": "CREATE TABLE Projects (\n  Code Char(4),\n  Name Char(50) not null,\n  Hours int,\n  Primary Key (Code)\n);",
        "AssignedTo": "CREATE TABLE AssignedTo (\n  Scientist int not null,\n  Project char(4) not null,\n  Primary Key (Scientist, Project),\n  Foreign Key (Scientist) references Scientists (SSN),\n  Foreign Key (Project) references Projects (Code)\n);"
    },
    "ship_1": {
        "captain": "CREATE TABLE captain (\n\"Captain_ID\" int,\n\"Name\" text,\n\"Ship_ID\" int,\n\"age\" text,\n\"Class\" text,\n\"Rank\" text,\nPRIMARY KEY (\"Captain_ID\"),\nFOREIGN KEY (\"Ship_ID\") REFERENCES \"Ship\"(\"Ship_ID\")\n);",
        "Ship": "CREATE TABLE Ship (\n\"Ship_ID\" int,\n\"Name\" text,\n\"Type\" text,\n\"Built_Year\" real,\n\"Class\" text,\n\"Flag\" text,\nPRIMARY KEY (\"Ship_ID\")\n);"
    },
    "ship_mission": {
        "mission": "CREATE TABLE mission (\n\"Mission_ID\" int,\n\"Ship_ID\" int,\n\"Code\" text,\n\"Launched_Year\" int,\n\"Location\" text,\n\"Speed_knots\" int,\n\"Fate\" text,\nPRIMARY KEY (\"Mission_ID\"),\nFOREIGN KEY (\"Ship_ID\") REFERENCES `ship`(\"Ship_ID\")\n);",
        "ship": "CREATE TABLE ship (\n\"Ship_ID\" int,\n\"Name\" text,\n\"Type\" text,\n\"Nationality\" text,\n\"Tonnage\" int,\nPRIMARY KEY (\"Ship_ID\")\n);"
    },
    "shop_membership": {
        "member": "CREATE TABLE member (\n\"Member_ID\" int,\n\"Card_Number\" text,\n\"Name\" text,\n\"Hometown\" text,\n\"Level\" int,\nPRIMARY KEY (\"Member_ID\")\n);",
        "branch": "CREATE TABLE branch (\n\"Branch_ID\" int,\n\"Name\" text,\n\"Open_year\" text,\n\"Address_road\" text,\n\"City\" text,\n\"membership_amount\" text,\nPRIMARY KEY (\"Branch_ID\")\n);",
        "membership_register_branch": "CREATE TABLE membership_register_branch (\n\"Member_ID\" int,\n\"Branch_ID\" text,\n\"Register_Year\" text,\nPRIMARY KEY (\"Member_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES \"member\"(\"Member_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES \"branch\"(\"Branch_ID\")\n);",
        "purchase": "CREATE TABLE purchase (\n\"Member_ID\" int,\n\"Branch_ID\" text,\n\"Year\" text,\n\"Total_pounds\" real,\nPRIMARY KEY (\"Member_ID\",\"Branch_ID\",\"Year\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES \"member\"(\"Member_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES \"branch\"(\"Branch_ID\")\n);"
    },
    "singer": {
        "singer": "CREATE TABLE singer (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n);",
        "song": "CREATE TABLE song (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n);"
    },
    "soccer_1": {
        "Player_Attributes": "CREATE TABLE Player_Attributes (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`player_fifa_api_id`\tINTEGER,\n\t`player_api_id`\tINTEGER,\n\t`date`\tTEXT,\n\t`overall_rating`\tINTEGER,\n\t`potential`\tINTEGER,\n\t`preferred_foot`\tTEXT,\n\t`attacking_work_rate`\tTEXT,\n\t`defensive_work_rate`\tTEXT,\n\t`crossing`\tINTEGER,\n\t`finishing`\tINTEGER,\n\t`heading_accuracy`\tINTEGER,\n\t`short_passing`\tINTEGER,\n\t`volleys`\tINTEGER,\n\t`dribbling`\tINTEGER,\n\t`curve`\tINTEGER,\n\t`free_kick_accuracy`\tINTEGER,\n\t`long_passing`\tINTEGER,\n\t`ball_control`\tINTEGER,\n\t`acceleration`\tINTEGER,\n\t`sprint_speed`\tINTEGER,\n\t`agility`\tINTEGER,\n\t`reactions`\tINTEGER,\n\t`balance`\tINTEGER,\n\t`shot_power`\tINTEGER,\n\t`jumping`\tINTEGER,\n\t`stamina`\tINTEGER,\n\t`strength`\tINTEGER,\n\t`long_shots`\tINTEGER,\n\t`aggression`\tINTEGER,\n\t`interceptions`\tINTEGER,\n\t`positioning`\tINTEGER,\n\t`vision`\tINTEGER,\n\t`penalties`\tINTEGER,\n\t`marking`\tINTEGER,\n\t`standing_tackle`\tINTEGER,\n\t`sliding_tackle`\tINTEGER,\n\t`gk_diving`\tINTEGER,\n\t`gk_handling`\tINTEGER,\n\t`gk_kicking`\tINTEGER,\n\t`gk_positioning`\tINTEGER,\n\t`gk_reflexes`\tINTEGER,\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n);",
        "Player": "CREATE TABLE Player (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`player_api_id`\tINTEGER UNIQUE,\n\t`player_name`\tTEXT,\n\t`player_fifa_api_id`\tINTEGER UNIQUE,\n\t`birthday`\tTEXT,\n\t`height`\tINTEGER,\n\t`weight`\tINTEGER\n);",
        "Match": "CREATE TABLE Match (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`country_id`\tINTEGER,\n\t`league_id`\tINTEGER,\n\t`season`\tTEXT,\n\t`stage`\tINTEGER,\n\t`date`\tTEXT,\n\t`match_api_id`\tINTEGER UNIQUE,\n\t`home_team_api_id`\tINTEGER,\n\t`away_team_api_id`\tINTEGER,\n\t`home_team_goal`\tINTEGER,\n\t`away_team_goal`\tINTEGER,\n\t`home_player_X1`\tINTEGER,\n\t`home_player_X2`\tINTEGER,\n\t`home_player_X3`\tINTEGER,\n\t`home_player_X4`\tINTEGER,\n\t`home_player_X5`\tINTEGER,\n\t`home_player_X6`\tINTEGER,\n\t`home_player_X7`\tINTEGER,\n\t`home_player_X8`\tINTEGER,\n\t`home_player_X9`\tINTEGER,\n\t`home_player_X10`\tINTEGER,\n\t`home_player_X11`\tINTEGER,\n\t`away_player_X1`\tINTEGER,\n\t`away_player_X2`\tINTEGER,\n\t`away_player_X3`\tINTEGER,\n\t`away_player_X4`\tINTEGER,\n\t`away_player_X5`\tINTEGER,\n\t`away_player_X6`\tINTEGER,\n\t`away_player_X7`\tINTEGER,\n\t`away_player_X8`\tINTEGER,\n\t`away_player_X9`\tINTEGER,\n\t`away_player_X10`\tINTEGER,\n\t`away_player_X11`\tINTEGER,\n\t`home_player_Y1`\tINTEGER,\n\t`home_player_Y2`\tINTEGER,\n\t`home_player_Y3`\tINTEGER,\n\t`home_player_Y4`\tINTEGER,\n\t`home_player_Y5`\tINTEGER,\n\t`home_player_Y6`\tINTEGER,\n\t`home_player_Y7`\tINTEGER,\n\t`home_player_Y8`\tINTEGER,\n\t`home_player_Y9`\tINTEGER,\n\t`home_player_Y10`\tINTEGER,\n\t`home_player_Y11`\tINTEGER,\n\t`away_player_Y1`\tINTEGER,\n\t`away_player_Y2`\tINTEGER,\n\t`away_player_Y3`\tINTEGER,\n\t`away_player_Y4`\tINTEGER,\n\t`away_player_Y5`\tINTEGER,\n\t`away_player_Y6`\tINTEGER,\n\t`away_player_Y7`\tINTEGER,\n\t`away_player_Y8`\tINTEGER,\n\t`away_player_Y9`\tINTEGER,\n\t`away_player_Y10`\tINTEGER,\n\t`away_player_Y11`\tINTEGER,\n\t`home_player_1`\tINTEGER,\n\t`home_player_2`\tINTEGER,\n\t`home_player_3`\tINTEGER,\n\t`home_player_4`\tINTEGER,\n\t`home_player_5`\tINTEGER,\n\t`home_player_6`\tINTEGER,\n\t`home_player_7`\tINTEGER,\n\t`home_player_8`\tINTEGER,\n\t`home_player_9`\tINTEGER,\n\t`home_player_10`\tINTEGER,\n\t`home_player_11`\tINTEGER,\n\t`away_player_1`\tINTEGER,\n\t`away_player_2`\tINTEGER,\n\t`away_player_3`\tINTEGER,\n\t`away_player_4`\tINTEGER,\n\t`away_player_5`\tINTEGER,\n\t`away_player_6`\tINTEGER,\n\t`away_player_7`\tINTEGER,\n\t`away_player_8`\tINTEGER,\n\t`away_player_9`\tINTEGER,\n\t`away_player_10`\tINTEGER,\n\t`away_player_11`\tINTEGER,\n\t`goal`\tTEXT,\n\t`shoton`\tTEXT,\n\t`shotoff`\tTEXT,\n\t`foulcommit`\tTEXT,\n\t`card`\tTEXT,\n\t`cross`\tTEXT,\n\t`corner`\tTEXT,\n\t`possession`\tTEXT,\n\t`B365H`\tNUMERIC,\n\t`B365D`\tNUMERIC,\n\t`B365A`\tNUMERIC,\n\t`BWH`\tNUMERIC,\n\t`BWD`\tNUMERIC,\n\t`BWA`\tNUMERIC,\n\t`IWH`\tNUMERIC,\n\t`IWD`\tNUMERIC,\n\t`IWA`\tNUMERIC,\n\t`LBH`\tNUMERIC,\n\t`LBD`\tNUMERIC,\n\t`LBA`\tNUMERIC,\n\t`PSH`\tNUMERIC,\n\t`PSD`\tNUMERIC,\n\t`PSA`\tNUMERIC,\n\t`WHH`\tNUMERIC,\n\t`WHD`\tNUMERIC,\n\t`WHA`\tNUMERIC,\n\t`SJH`\tNUMERIC,\n\t`SJD`\tNUMERIC,\n\t`SJA`\tNUMERIC,\n\t`VCH`\tNUMERIC,\n\t`VCD`\tNUMERIC,\n\t`VCA`\tNUMERIC,\n\t`GBH`\tNUMERIC,\n\t`GBD`\tNUMERIC,\n\t`GBA`\tNUMERIC,\n\t`BSH`\tNUMERIC,\n\t`BSD`\tNUMERIC,\n\t`BSA`\tNUMERIC,\n\tFOREIGN KEY(`country_id`) REFERENCES `Country`(`id`),\n\tFOREIGN KEY(`league_id`) REFERENCES `League`(`id`),\n\tFOREIGN KEY(`home_team_api_id`) REFERENCES `Team`(`team_api_id`),\n\tFOREIGN KEY(`away_team_api_id`) REFERENCES `Team`(`team_api_id`),\n\tFOREIGN KEY(`home_player_1`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_2`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_3`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_4`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_5`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_6`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_7`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_8`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_9`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_10`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`home_player_11`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_1`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_2`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_3`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_4`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_5`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_6`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_7`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_8`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_9`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_10`) REFERENCES `Player`(`player_api_id`),\n\tFOREIGN KEY(`away_player_11`) REFERENCES `Player`(`player_api_id`)\n);",
        "League": "CREATE TABLE League (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`country_id`\tINTEGER,\n\t`name`\tTEXT UNIQUE,\n\tFOREIGN KEY(`country_id`) REFERENCES `Country`(`id`)\n);",
        "Country": "CREATE TABLE Country (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`name`\tTEXT UNIQUE\n);",
        "Team": "CREATE TABLE Team (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`team_api_id`\tINTEGER UNIQUE,\n\t`team_fifa_api_id`\tINTEGER,\n\t`team_long_name`\tTEXT,\n\t`team_short_name`\tTEXT\n);",
        "Team_Attributes": "CREATE TABLE Team_Attributes (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`team_fifa_api_id`\tINTEGER,\n\t`team_api_id`\tINTEGER,\n\t`date`\tTEXT,\n\t`buildUpPlaySpeed`\tINTEGER,\n\t`buildUpPlaySpeedClass`\tTEXT,\n\t`buildUpPlayDribbling`\tINTEGER,\n\t`buildUpPlayDribblingClass`\tTEXT,\n\t`buildUpPlayPassing`\tINTEGER,\n\t`buildUpPlayPassingClass`\tTEXT,\n\t`buildUpPlayPositioningClass`\tTEXT,\n\t`chanceCreationPassing`\tINTEGER,\n\t`chanceCreationPassingClass`\tTEXT,\n\t`chanceCreationCrossing`\tINTEGER,\n\t`chanceCreationCrossingClass`\tTEXT,\n\t`chanceCreationShooting`\tINTEGER,\n\t`chanceCreationShootingClass`\tTEXT,\n\t`chanceCreationPositioningClass`\tTEXT,\n\t`defencePressure`\tINTEGER,\n\t`defencePressureClass`\tTEXT,\n\t`defenceAggression`\tINTEGER,\n\t`defenceAggressionClass`\tTEXT,\n\t`defenceTeamWidth`\tINTEGER,\n\t`defenceTeamWidthClass`\tTEXT,\n\t`defenceDefenderLineClass`\tTEXT,\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n);"
    },
    "soccer_2": {},
    "solvency_ii": {
        "Addresses": "CREATE TABLE Addresses (\nAddress_ID INTEGER NOT NULL ,\naddress_details VARCHAR(255),\nPRIMARY KEY (Address_ID),\nUNIQUE (Address_ID)\n);",
        "Locations": "CREATE TABLE Locations (\nLocation_ID INTEGER NOT NULL ,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Location_ID)\n);",
        "Products": "CREATE TABLE Products (\nProduct_ID INTEGER NOT NULL,\nProduct_Type_Code CHAR(15),\nProduct_Name VARCHAR(255),\nProduct_Price DECIMAL(20,4),\nPRIMARY KEY (Product_ID),\nUNIQUE (Product_ID)\n);",
        "Parties": "CREATE TABLE Parties (\nParty_ID INTEGER NOT NULL,\nParty_Details VARCHAR(255),\nPRIMARY KEY (Party_ID)\n);",
        "Assets": "CREATE TABLE Assets (\nAsset_ID INTEGER NOT NULL ,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Asset_ID)\n);",
        "Channels": "CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL ,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Channel_ID)\n);",
        "Finances": "CREATE TABLE Finances (\nFinance_ID INTEGER NOT NULL ,\nOther_Details VARCHAR(255),\nPRIMARY KEY (Finance_ID)\n);",
        "Events": "CREATE TABLE Events (\nEvent_ID INTEGER NOT NULL ,\nAddress_ID INTEGER,\nChannel_ID INTEGER NOT NULL,\nEvent_Type_Code CHAR(15),\nFinance_ID INTEGER NOT NULL,\nLocation_ID INTEGER NOT NULL,\nPRIMARY KEY (Event_ID),\nUNIQUE (Event_ID),\nFOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID),\nFOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID),\nFOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID)\n);",
        "Products_in_Events": "CREATE TABLE Products_in_Events (\nProduct_in_Event_ID INTEGER NOT NULL,\nEvent_ID INTEGER NOT NULL,\nProduct_ID INTEGER NOT NULL,\nPRIMARY KEY (Product_in_Event_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID),\nFOREIGN KEY (Product_ID) REFERENCES Products (Product_ID)\n);",
        "Parties_in_Events": "CREATE TABLE Parties_in_Events (\nParty_ID INTEGER NOT NULL,\nEvent_ID INTEGER NOT NULL,\nRole_Code CHAR(15),\nPRIMARY KEY (Party_ID, Event_ID),\nFOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)\n);",
        "Agreements": "CREATE TABLE Agreements (\nDocument_ID INTEGER NOT NULL ,\nEvent_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)\n);",
        "Assets_in_Events": "CREATE TABLE Assets_in_Events (\nAsset_ID INTEGER NOT NULL,\nEvent_ID INTEGER NOT NULL,\nPRIMARY KEY (Asset_ID, Event_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID),\nFOREIGN KEY (Event_ID) REFERENCES Events (Event_ID)\n);"
    },
    "sports_competition": {
        "club": "CREATE TABLE club (\n\"Club_ID\" int,\n\"name\" text,\n\"Region\" text,\n\"Start_year\" text,\nPRIMARY KEY (\"Club_ID\")\n);",
        "club_rank": "CREATE TABLE club_rank (\n\"Rank\" real,\n\"Club_ID\" int,\n\"Gold\" real,\n\"Silver\" real,\n\"Bronze\" real,\n\"Total\" real,\nPRIMARY KEY (\"Rank\",\"Club_ID\")\nFOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`)\n);",
        "player": "CREATE TABLE player (\n\"Player_ID\" int,\n\"name\" text,\n\"Position\" text,\n\"Club_ID\" int,\n\"Apps\" real,\n\"Tries\" real,\n\"Goals\" text,\n\"Points\" real,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`)\n);",
        "competition": "CREATE TABLE competition (\n\"Competition_ID\" int,\n\"Year\" real,\n\"Competition_type\" text,\n\"Country\" text,\nPRIMARY KEY (\"Competition_ID\")\n);",
        "competition_result": "CREATE TABLE competition_result (\n\"Competition_ID\" int,\n\"Club_ID_1\" int,\n\"Club_ID_2\" int,\n\"Score\" text,\nPRIMARY KEY (\"Competition_ID\",\"Club_ID_1\",\"Club_ID_2\"),\nFOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`),\nFOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`),\nFOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`)\n);"
    },
    "station_weather": {
        "train": "CREATE TABLE train (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n);",
        "station": "CREATE TABLE station (\n    \"id\" int,\n    \"network_name\" text,\n    \"services\" text,\n    \"local_authority\" text,\n    primary key (\"id\")\n);",
        "route": "CREATE TABLE route (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n);",
        "weekly_weather": "CREATE TABLE weekly_weather (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n);"
    },
    "store_1": {
        "artists": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(120)\n);",
        "albums": "CREATE TABLE albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title VARCHAR(160)  NOT NULL,\n    artist_id INTEGER  NOT NULL,\n    FOREIGN KEY (artist_id) REFERENCES artists (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "employees": "CREATE TABLE employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    last_name VARCHAR(20)  NOT NULL,\n    first_name VARCHAR(20)  NOT NULL,\n    title VARCHAR(30),\n    reports_to INTEGER,\n    birth_date TIMESTAMP,\n    hire_date TIMESTAMP,\n    address VARCHAR(70),\n    city VARCHAR(40),\n    state VARCHAR(40),\n    country VARCHAR(40),\n    postal_code VARCHAR(10),\n    phone VARCHAR(24),\n    fax VARCHAR(24),\n    email VARCHAR(60),\n    FOREIGN KEY (reports_to) REFERENCES employees (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "customers": "CREATE TABLE customers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name VARCHAR(40)  NOT NULL,\n    last_name VARCHAR(20)  NOT NULL,\n    company VARCHAR(80),\n    address VARCHAR(70),\n    city VARCHAR(40),\n    state VARCHAR(40),\n    country VARCHAR(40),\n    postal_code VARCHAR(10),\n    phone VARCHAR(24),\n    fax VARCHAR(24),\n    email VARCHAR(60)  NOT NULL,\n    support_rep_id INTEGER,\n    FOREIGN KEY (support_rep_id) REFERENCES employees (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "genres": "CREATE TABLE genres (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(120)\n);",
        "invoices": "CREATE TABLE invoices (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    customer_id INTEGER  NOT NULL,\n    invoice_date TIMESTAMP  NOT NULL,\n    billing_address VARCHAR(70),\n    billing_city VARCHAR(40),\n    billing_state VARCHAR(40),\n    billing_country VARCHAR(40),\n    billing_postal_code VARCHAR(10),\n    total NUMERIC(10,2)  NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES customers (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "media_types": "CREATE TABLE media_types (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(120)\n);",
        "tracks": "CREATE TABLE tracks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(200)  NOT NULL,\n    album_id INTEGER,\n    media_type_id INTEGER  NOT NULL,\n    genre_id INTEGER,\n    composer VARCHAR(220),\n    milliseconds INTEGER  NOT NULL,\n    bytes INTEGER,\n    unit_price NUMERIC(10,2)  NOT NULL,\n    FOREIGN KEY (album_id) REFERENCES albums (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION,\n    FOREIGN KEY (genre_id) REFERENCES genres (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION,\n    FOREIGN KEY (media_type_id) REFERENCES media_types (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "invoice_lines": "CREATE TABLE invoice_lines (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    invoice_id INTEGER  NOT NULL,\n    track_id INTEGER  NOT NULL,\n    unit_price NUMERIC(10,2)  NOT NULL,\n    quantity INTEGER  NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES invoices (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION,\n    FOREIGN KEY (track_id) REFERENCES tracks (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);",
        "playlists": "CREATE TABLE playlists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(120)\n);",
        "playlist_tracks": "CREATE TABLE playlist_tracks (\n    playlist_id INTEGER  NOT NULL,\n    track_id INTEGER  NOT NULL,\n    CONSTRAINT PK_PlaylistTrack PRIMARY KEY  (playlist_id, track_id),\n    FOREIGN KEY (playlist_id) REFERENCES playlists (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION,\n    FOREIGN KEY (track_id) REFERENCES tracks (id)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);"
    },
    "store_product": {
        "product": "CREATE TABLE product (\n\"product_id\" int,\n\"product\" text,\n\"dimensions\" text,\n\"dpi\" real,\n\"pages_per_minute_color\" real,\n\"max_page_size\" text,\n\"interface\" text,\nPRIMARY KEY (\"product_id\")\n);",
        "store": "CREATE TABLE store (\n\"Store_ID\" int,\n\"Store_Name\" text,\n\"Type\" text,\n\"Area_size\" real,\n\"Number_of_product_category\" real,\n\"Ranking\" int,\nPRIMARY KEY (\"Store_ID\")\n);",
        "district": "CREATE TABLE district (\n\"District_ID\" int,\n\"District_name\" text,\n\"Headquartered_City\" text,\n\"City_Population\" real,\n\"City_Area\" real,\nPRIMARY KEY (\"District_ID\")\n);",
        "store_product": "CREATE TABLE store_product (\n\"Store_ID\" int,\n\"Product_ID\" int,\nPRIMARY KEY (\"Store_ID\",\"Product_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Product_ID`) REFERENCES `product`(`Product_ID`)\n);",
        "store_district": "CREATE TABLE store_district (\n\"Store_ID\" int,\n\"District_ID\" int,\nPRIMARY KEY (\"Store_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`District_ID`) REFERENCES `district`(`District_ID`)\n);"
    },
    "storm_record": {
        "storm": "CREATE TABLE storm (\n\"Storm_ID\" int,\n\"Name\" text,\n\"Dates_active\" text,\n\"Max_speed\" int,\n\"Damage_millions_USD\" real,\n\"Number_Deaths\" int,\nPRIMARY KEY (\"Storm_ID\")\n);",
        "region": "CREATE TABLE region (\n`Region_id` int,\n`Region_code` text,\n`Region_name` text,\nPRIMARY KEY (\"Region_id\")\n);",
        "affected_region": "CREATE TABLE affected_region (\n`Region_id` int,\n`Storm_ID` int,\n`Number_city_affected` real,\nPRIMARY KEY (`Region_id`,`Storm_ID`),\nFOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`),\nFOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`)\n);"
    },
    "student_assessment": {
        "Addresses": "CREATE TABLE Addresses (\naddress_id INTEGER NOT NULL,\nline_1 VARCHAR(80),\nline_2 VARCHAR(80),\ncity VARCHAR(50),\nzip_postcode CHAR(20),\nstate_province_county VARCHAR(50),\ncountry VARCHAR(50),\nPRIMARY KEY (address_id)\n);",
        "People": "CREATE TABLE People (\nperson_id INTEGER NOT NULL,\nfirst_name VARCHAR(255),\nmiddle_name VARCHAR(255),\nlast_name VARCHAR(255),\ncell_mobile_number VARCHAR(40),\nemail_address VARCHAR(40),\nlogin_name VARCHAR(40),\npassword VARCHAR(40),\nPRIMARY KEY (person_id)\n);",
        "Students": "CREATE TABLE Students (\nstudent_id INTEGER NOT NULL,\nstudent_details VARCHAR(255),\nPRIMARY KEY (student_id),\nFOREIGN KEY (student_id) REFERENCES People (person_id)\n);",
        "Courses": "CREATE TABLE Courses (\ncourse_id VARCHAR(100) NOT NULL,\ncourse_name VARCHAR(120),\ncourse_description VARCHAR(255),\nother_details VARCHAR(255),\nPRIMARY KEY (course_id)\n);",
        "People_Addresses": "CREATE TABLE People_Addresses (\nperson_address_id INTEGER NOT NULL,\nperson_id INTEGER NOT NULL,\naddress_id INTEGER NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nPRIMARY KEY (person_address_id),\nFOREIGN KEY (person_id) REFERENCES People (person_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id)\n);",
        "Student_Course_Registrations": "CREATE TABLE Student_Course_Registrations (\nstudent_id INTEGER NOT NULL,\ncourse_id INTEGER NOT NULL,\nregistration_date DATETIME NOT NULL,\nPRIMARY KEY (student_id, course_id),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (course_id) REFERENCES Courses (course_id)\n);",
        "Student_Course_Attendance": "CREATE TABLE Student_Course_Attendance (\nstudent_id INTEGER NOT NULL,\ncourse_id INTEGER NOT NULL,\ndate_of_attendance DATETIME NOT NULL,\nPRIMARY KEY (student_id, course_id),\nFOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id)\n);",
        "Candidates": "CREATE TABLE Candidates (\ncandidate_id INTEGER NOT NULL ,\ncandidate_details VARCHAR(255),\nPRIMARY KEY (candidate_id),\nFOREIGN KEY (candidate_id) REFERENCES People (person_id)\n);",
        "Candidate_Assessments": "CREATE TABLE Candidate_Assessments (\ncandidate_id INTEGER NOT NULL,\nqualification CHAR(15) NOT NULL,\nassessment_date DATETIME NOT NULL,\nasessment_outcome_code CHAR(15) NOT NULL,\nPRIMARY KEY (candidate_id, qualification),\nFOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id)\n);"
    },
    "student_transcripts_tracking": {
        "Addresses": "CREATE TABLE Addresses (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n);",
        "Courses": "CREATE TABLE Courses (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n);",
        "Departments": "CREATE TABLE Departments (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n);",
        "Degree_Programs": "CREATE TABLE Degree_Programs (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n);",
        "Sections": "CREATE TABLE Sections (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n);",
        "Semesters": "CREATE TABLE Semesters (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n);",
        "Students": "CREATE TABLE Students (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n);",
        "Student_Enrolment": "CREATE TABLE Student_Enrolment (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n);",
        "Student_Enrolment_Courses": "CREATE TABLE Student_Enrolment_Courses (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n);",
        "Transcripts": "CREATE TABLE Transcripts (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n);",
        "Transcript_Contents": "CREATE TABLE Transcript_Contents (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n);"
    },
    "swimming": {
        "swimmer": "CREATE TABLE swimmer (\n\"ID\" int,\n\"name\" text,\n\"Nationality\" text,\n\"meter_100\" real,\n\"meter_200\" text,\n\"meter_300\" text,\n\"meter_400\" text,\n\"meter_500\" text,\n\"meter_600\" text,\n\"meter_700\" text,\n\"Time\" text,\nPRIMARY KEY (\"ID\")\n);",
        "stadium": "CREATE TABLE stadium (\n\"ID\" int,\n\"name\" text,\n\"Capacity\" int,\n\"City\" text,\n\"Country\" text,\n\"Opening_year\" int,\nPRIMARY KEY (\"ID\")\n);",
        "event": "CREATE TABLE event (\n\"ID\" int,\n\"Name\" text,\n\"Stadium_ID\" int,\n\"Year\" text,\nPRIMARY KEY (\"ID\"),\nFOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`)\n);",
        "record": "CREATE TABLE record (\n\"ID\" int,\n\"Result\" text,\n\"Swimmer_ID\" int,\n\"Event_ID\" int,\nPRIMARY KEY (\"Swimmer_ID\",\"Event_ID\"),\nFOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`),\nFOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`)\n);"
    },
    "theme_gallery": {
        "artist": "CREATE TABLE artist (\n\"Artist_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Year_Join\" int,\n\"Age\" int,\nPRIMARY KEY (\"Artist_ID\")\n);",
        "exhibition": "CREATE TABLE exhibition (\n\"Exhibition_ID\" int,\n\"Year\" int,\n\"Theme\" text,\n\"Artist_ID\" int,\n\"Ticket_Price\" real,\nPRIMARY KEY (\"Exhibition_ID\"),\nFOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`)\n);",
        "exhibition_record": "CREATE TABLE exhibition_record (\n\"Exhibition_ID\" int,\n\"Date\" text,\n\"Attendance\" int,\nPRIMARY KEY (\"Exhibition_ID\",\"Date\"),\nFOREIGN KEY (`Exhibition_ID`) REFERENCES `exhibition`(`Exhibition_ID`)\n);"
    },
    "tracking_grants_for_research": {
        "Document_Types": "CREATE TABLE Document_Types (\n`document_type_code` VARCHAR(10) PRIMARY KEY,\n`document_description` VARCHAR(255) NOT NULL\n);",
        "Documents": "CREATE TABLE Documents (\n`document_id` INTEGER PRIMARY KEY,\n`document_type_code` VARCHAR(10),\n`grant_id` INTEGER NOT NULL,\n`sent_date` DATETIME NOT NULL,\n`response_received_date` DATETIME NOT NULL,\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ),\nFOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` )\n);",
        "Grants": "CREATE TABLE Grants (\n`grant_id` INTEGER PRIMARY KEY,\n`organisation_id` INTEGER NOT NULL,\n`grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0,\n`grant_start_date` DATETIME NOT NULL,\n`grant_end_date` DATETIME NOT NULL,\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` )\n);",
        "Organisation_Types": "CREATE TABLE Organisation_Types (\n`organisation_type` VARCHAR(10) PRIMARY KEY,\n`organisation_type_description` VARCHAR(255) NOT NULL\n);",
        "Organisations": "CREATE TABLE Organisations (\n`organisation_id` INTEGER PRIMARY KEY,\n`organisation_type` VARCHAR(10) NOT NULL,\n`organisation_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` )\n);",
        "Project_Outcomes": "CREATE TABLE Project_Outcomes (\n`project_id` INTEGER NOT NULL,\n`outcome_code` VARCHAR(10) NOT NULL,\n`outcome_details` VARCHAR(255),\nFOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` )\n);",
        "Project_Staff": "CREATE TABLE Project_Staff (\n`staff_id` DOUBLE PRIMARY KEY,\n`project_id` INTEGER NOT NULL,\n`role_code` VARCHAR(10) NOT NULL,\n`date_from` DATETIME,\n`date_to` DATETIME,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` )\n);",
        "Projects": "CREATE TABLE Projects (\n`project_id` INTEGER PRIMARY KEY,\n`organisation_id` INTEGER NOT NULL,\n`project_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` )\n);",
        "Research_Outcomes": "CREATE TABLE Research_Outcomes (\n`outcome_code` VARCHAR(10) PRIMARY KEY,\n`outcome_description` VARCHAR(255) NOT NULL\n);",
        "Research_Staff": "CREATE TABLE Research_Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`employer_organisation_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` )\n);",
        "Staff_Roles": "CREATE TABLE Staff_Roles (\n`role_code` VARCHAR(10) PRIMARY KEY,\n`role_description` VARCHAR(255) NOT NULL\n);",
        "Tasks": "CREATE TABLE Tasks (\n`task_id` INTEGER PRIMARY KEY,\n`project_id` INTEGER NOT NULL,\n`task_details` VARCHAR(255) NOT NULL,\n`eg Agree Objectives` VARCHAR(1),\nFOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` )\n);"
    },
    "tracking_orders": {
        "Customers": "CREATE TABLE Customers (\n`customer_id` INTEGER PRIMARY KEY,\n`customer_name` VARCHAR(80),\n`customer_details` VARCHAR(255)\n);",
        "Invoices": "CREATE TABLE Invoices (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_date` DATETIME,\n`invoice_details` VARCHAR(255)\n);",
        "Orders": "CREATE TABLE Orders (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\n`order_details` VARCHAR(255),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);",
        "Products": "CREATE TABLE Products (\n`product_id` INTEGER PRIMARY KEY,\n`product_name` VARCHAR(80),\n`product_details` VARCHAR(255)\n);",
        "Order_Items": "CREATE TABLE Order_Items (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status` VARCHAR(10) NOT NULL,\n`order_item_details` VARCHAR(255),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);",
        "Shipments": "CREATE TABLE Shipments (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\n`other_shipment_details` VARCHAR(255),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ),\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` )\n);",
        "Shipment_Items": "CREATE TABLE Shipment_Items (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` )\n);"
    },
    "tracking_share_transactions": {
        "Investors": "CREATE TABLE Investors (\n`investor_id` INTEGER PRIMARY KEY,\n`Investor_details` VARCHAR(255)\n);",
        "Lots": "CREATE TABLE Lots (\n`lot_id` INTEGER PRIMARY KEY,\n`investor_id` INTEGER NOT NULL,\n`lot_details` VARCHAR(255),\nFOREIGN KEY (`investor_id` ) REFERENCES `Investors`(`investor_id` )\n);",
        "Ref_Transaction_Types": "CREATE TABLE Ref_Transaction_Types (\n`transaction_type_code` VARCHAR(10) PRIMARY KEY,\n`transaction_type_description` VARCHAR(80) NOT NULL\n);",
        "Transactions": "CREATE TABLE Transactions (\n`transaction_id` INTEGER PRIMARY KEY,\n`investor_id` INTEGER NOT NULL,\n`transaction_type_code` VARCHAR(10) NOT NULL,\n`date_of_transaction` DATETIME,\n`amount_of_transaction` DECIMAL(19,4),\n`share_count` VARCHAR(40),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`investor_id` ) REFERENCES `Investors`(`investor_id` ),FOREIGN KEY (`transaction_type_code` ) REFERENCES `Ref_Transaction_Types`(`transaction_type_code` )\n);",
        "Sales": "CREATE TABLE Sales (\n`sales_transaction_id` INTEGER PRIMARY KEY,\n`sales_details` VARCHAR(255),\nFOREIGN KEY (`sales_transaction_id` ) REFERENCES `Transactions`(`transaction_id` )\n);",
        "Purchases": "CREATE TABLE Purchases (\n`purchase_transaction_id` INTEGER NOT NULL,\n`purchase_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`purchase_transaction_id` ) REFERENCES `Transactions`(`transaction_id` )\n);",
        "Transactions_Lots": "CREATE TABLE Transactions_Lots (\n`transaction_id` INTEGER NOT NULL,\n`lot_id` INTEGER NOT NULL,\nFOREIGN KEY (`lot_id` ) REFERENCES `Lots`(`lot_id` ),\nFOREIGN KEY (`transaction_id` ) REFERENCES `Transactions`(`transaction_id` )\n);"
    },
    "tracking_software_problems": {
        "Problem_Category_Codes": "CREATE TABLE Problem_Category_Codes (\n`problem_category_code` VARCHAR(20) PRIMARY KEY,\n`problem_category_description` VARCHAR(80)\n);",
        "Problem_Log": "CREATE TABLE Problem_Log (\n`problem_log_id` INTEGER PRIMARY KEY,\n`assigned_to_staff_id` INTEGER NOT NULL,\n`problem_id` INTEGER NOT NULL,\n`problem_category_code` VARCHAR(20) NOT NULL,\n`problem_status_code` VARCHAR(20) NOT NULL,\n`log_entry_date` DATETIME,\n`log_entry_description` VARCHAR(255),\n`log_entry_fix` VARCHAR(255),\n`other_log_details` VARCHAR(255),\nFOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` )\n);",
        "Problem_Status_Codes": "CREATE TABLE Problem_Status_Codes (\n`problem_status_code` VARCHAR(20) PRIMARY KEY,\n`problem_status_description` VARCHAR(80)\n);",
        "Product": "CREATE TABLE Product (\n`product_id` INTEGER PRIMARY KEY,\n`product_name` VARCHAR(80),\n`product_details` VARCHAR(255)\n);",
        "Staff": "CREATE TABLE Staff (\n`staff_id` INTEGER PRIMARY KEY,\n`staff_first_name` VARCHAR(80),\n`staff_last_name` VARCHAR(80),\n`other_staff_details` VARCHAR(255)\n);",
        "Problems": "CREATE TABLE Problems (\n`problem_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`closure_authorised_by_staff_id` INTEGER NOT NULL,\n`reported_by_staff_id` INTEGER NOT NULL,\n`date_problem_reported` DATETIME NOT NULL,\n`date_problem_closed` DATETIME,\n`problem_description` VARCHAR(255),\n`other_problem_details` VARCHAR(255),\nFOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ),\nFOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` )\n);"
    },
    "train_station": {
        "station": "CREATE TABLE station (\n\"Station_ID\" int,\n\"Name\" text,\n\"Annual_entry_exit\" real,\n\"Annual_interchanges\" real,\n\"Total_Passengers\" real,\n\"Location\" text,\n\"Main_Services\" text,\n\"Number_of_Platforms\" int,\nPRIMARY KEY (\"Station_ID\")\n);",
        "train": "CREATE TABLE train (\n\"Train_ID\" int,\n\"Name\" text,\n\"Time\" text,\n\"Service\" text,\nPRIMARY KEY (\"Train_ID\")\n);",
        "train_station": "CREATE TABLE train_station (\n\"Train_ID\" int,\n\"Station_ID\" int,\t\nPRIMARY KEY (\"Train_ID\",\"Station_ID\"),\nFOREIGN KEY (\"Train_ID\") REFERENCES \"train\"(\"Train_ID\"),\nFOREIGN KEY (\"Station_ID\") REFERENCES \"station\"(\"Station_ID\")\n);"
    },
    "tvshow": {},
    "university_basketball": {
        "basketball_match": "CREATE TABLE basketball_match (\n\"Team_ID\" int,\n\"School_ID\" int,\n\"Team_Name\" text,\n\"ACC_Regular_Season\" text,\n\"ACC_Percent\" text,\n\"ACC_Home\" text,\n\"ACC_Road\" text,\n\"All_Games\" text,\n\"All_Games_Percent\" int,\n\"All_Home\" text,\n\"All_Road\" text,\n\"All_Neutral\" text,\nPRIMARY KEY (\"Team_ID\"),\nFOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`)\n);",
        "university": "CREATE TABLE university (\n\"School_ID\" int,\n\"School\" text,\n\"Location\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Nickname\" text,\n\"Primary_conference\" text,\nPRIMARY KEY (\"School_ID\")\n);"
    },
    "voter_2": {
        "Student": "CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3)\n );",
        "Voting_record": "CREATE TABLE Voting_record (\n       StuID    \tINTEGER,\n       Registration_Date\t\tVARCHAR(12),\n       Election_Cycle\t\tVARCHAR(12),\n       President_Vote\t\tINTEGER,\n       Vice_President_Vote\t\tINTEGER,\n       Secretary_Vote\t\tINTEGER,\n       Treasurer_Vote\t\tINTEGER,\n       Class_President_Vote\t\tINTEGER,\n       Class_Senator_Vote\t\tINTEGER,\n       FOREIGN KEY(StuID) REFERENCES Student(StuID), \n       FOREIGN KEY(President_Vote) REFERENCES Student(StuID),\n       FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID),\n       FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID),\n       FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID),\n       FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID),\n       FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID)\n);"
    },
    "wedding": {
        "people": "CREATE TABLE people (\n\"People_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Is_Male\" text,\n\"Age\" int,\nPRIMARY KEY (\"People_ID\")\n);",
        "church": "CREATE TABLE church (\n\"Church_ID\" int,\n\"Name\" text,\n\"Organized_by\" text,\n\"Open_Date\" int,\n\"Continuation_of\" text,\nPRIMARY KEY (\"Church_ID\")\n);",
        "wedding": "CREATE TABLE wedding (\n\"Church_ID\" int,\n\"Male_ID\" int,\n\"Female_ID\" int,\n\"Year\" int,\nPRIMARY KEY (\"Church_ID\",\"Male_ID\",\"Female_ID\"),\nFOREIGN KEY (\"Church_ID\") REFERENCES `church`(\"Church_ID\"),\nFOREIGN KEY (\"Male_ID\") REFERENCES `people`(\"People_ID\"),\nFOREIGN KEY (\"Female_ID\") REFERENCES `people`(\"People_ID\")\n);"
    },
    "workshop_paper": {
        "workshop": "CREATE TABLE workshop (\n\"Workshop_ID\" int,\n\"Date\" text,\n\"Venue\" text,\n\"Name\" text,\nPRIMARY KEY (\"Workshop_ID\")\n);",
        "submission": "CREATE TABLE submission (\n\"Submission_ID\" int,\n\"Scores\" real,\n\"Author\" text,\n\"College\" text,\nPRIMARY KEY (\"Submission_ID\")\n);",
        "Acceptance": "CREATE TABLE Acceptance (\n\"Submission_ID\" int,\n\"Workshop_ID\" int,\n\"Result\" text,\nPRIMARY KEY (\"Submission_ID\",\"Workshop_ID\"),\nFOREIGN KEY (\"Submission_ID\") REFERENCES `submission`(\"Submission_ID\"),\nFOREIGN KEY (\"Workshop_ID\") REFERENCES `workshop`(\"Workshop_ID\")\n);"
    },
    "wrestler": {
        "wrestler": "CREATE TABLE wrestler (\n\"Wrestler_ID\" int,\n\"Name\" text,\n\"Reign\" text,\n\"Days_held\" text,\n\"Location\" text,\n\"Event\" text,\nPRIMARY KEY (\"Wrestler_ID\")\n);",
        "Elimination": "CREATE TABLE Elimination (\n\"Elimination_ID\" text,\n\"Wrestler_ID\" text,\n\"Team\" text,\n\"Eliminated_By\" text,\n\"Elimination_Move\" text,\n\"Time\" text,\nPRIMARY KEY (\"Elimination_ID\"),\nFOREIGN KEY (\"Wrestler_ID\") REFERENCES \"wrestler\"(\"Wrestler_ID\")\n);"
    },
    "yelp": {
        "business": "CREATE TABLE business (\n\"bid\" int,\n\"business_id\" text,\n\"name\" text,\n\"full_address\" text,\n\"city\" text,\n\"latitude\" text,\n\"longitude\" text,\n\"review_count\" int,\n\"is_open\" int,\n\"rating\" real,\n\"state\" text,\nprimary key(\"bid\")\n);",
        "category": "CREATE TABLE category (\n\"id\" int,\n\"business_id\" text,\n\"category_name\" text,\nprimary key(\"id\"),\nforeign key(\"business_id\") references `business`(\"business_id\")\n);",
        "user": "CREATE TABLE user (\n\"uid\" int,\n\"user_id\" text,\n\"name\" text,\nprimary key(\"uid\")\n);",
        "checkin": "CREATE TABLE checkin (\n\"cid\" int,\n\"business_id\" text,\n\"count\" int,\n\"day\" text,\nprimary key(\"cid\"),\nforeign key(\"business_id\") references `business`(\"business_id\")\n);",
        "neighbourhood": "CREATE TABLE neighbourhood (\n\"id\" int,\n\"business_id\" text,\n\"neighbourhood_name\" text,\nprimary key(\"id\"),\nforeign key(\"business_id\") references `business`(\"business_id\")\n);",
        "review": "CREATE TABLE review (\n\"rid\" int,\n\"business_id\" text,\n\"user_id\" text,\n\"rating\" real,\n\"text\" text,\n\"year\" int,\n\"month\" text,\nprimary key(\"rid\"),\nforeign key(\"business_id\") references `business`(\"business_id\"),\nforeign key(\"user_id\") references `user`(\"user_id\")\n);",
        "tip": "CREATE TABLE tip (\n\"tip_id\" int,\n\"business_id\" text,\n\"text\" text,\n\"user_id\" text,\n\"likes\" int,\n\"year\" int,\n\"month\" text,\nprimary key(\"tip_id\")\nforeign key(\"business_id\") references `business`(\"business_id\"),\nforeign key(\"user_id\") references `user`(\"user_id\")\n\n);"
    }
}